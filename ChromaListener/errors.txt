	In file included from Chroma.cpp:14:0:
	ChromaAPI.h:40:2: error: ‘HMODULE’ does not name a type
	  HMODULE m_ChromaSDKModule;
  ^
	Chroma.cpp: In member function ‘int Chroma::mapPixels()’:
	Chroma.cpp:53:50: error: ‘_strdup’ was not declared in this scope
		localElement.name = _strdup(element->GetText());
                                                  ^
	Chroma.cpp: In member function ‘int Chroma::initialize()’:
	Chroma.cpp:73:36: error: ‘RGB’ was not declared in this scope
	  unsigned long defval = RGB(0, 0, 0);
                                    ^
	Chroma.cpp: In member function ‘void Chroma::updateColor(unsigned int, unsigned int, long unsigned int*)’:
	Chroma.cpp:148:68: error: ‘RGB’ was not declared in this scope
	   *led = RGB(color, (*led & 0x00FF00) >> 8, (*led & 0xFF0000) >> 16);
                                                                    ^
	Chroma.cpp: In member function ‘void Chroma::startThread()’:
	Chroma.cpp:187:36: error: ‘_beginthread’ was not declared in this scope
	  _beginthread(chromathread, 0, this);
                                    ^
	Chroma.cpp: In member function ‘void Chroma::chromaThread()’:
	Chroma.cpp:194:10: error: ‘Sleep’ was not declared in this scope
	   Sleep(5);
          ^
	make: *** [Chroma.o] Error 1
	In file included from ChromaAPI.cpp:9:0:
	RzChromaSDKDefines.h:20:18: error: ‘GUID’ does not name a type
		 static const GUID BLACKWIDOW_CHROMA = 
					  ^
	RzChromaSDKDefines.h:25:18: error: ‘GUID’ does not name a type
		 static const GUID BLACKWIDOW_CHROMA_TE = 
					  ^
	RzChromaSDKDefines.h:30:18: error: ‘GUID’ does not name a type
		 static const GUID DEATHSTALKER_CHROMA = 
					  ^
	RzChromaSDKDefines.h:35:18: error: ‘GUID’ does not name a type
		 static const GUID OVERWATCH_KEYBOARD = 
					  ^
	RzChromaSDKDefines.h:40:18: error: ‘GUID’ does not name a type
		 static const GUID BLACKWIDOW_X_CHROMA = 
					  ^
	RzChromaSDKDefines.h:45:18: error: ‘GUID’ does not name a type
		 static const GUID BLACKWIDOW_X_TE_CHROMA = 
					  ^
	RzChromaSDKDefines.h:50:18: error: ‘GUID’ does not name a type
		 static const GUID ORNATA_CHROMA =
					  ^
	RzChromaSDKDefines.h:55:18: error: ‘GUID’ does not name a type
		 static const GUID BLADE_STEALTH = 
					  ^
	RzChromaSDKDefines.h:60:18: error: ‘GUID’ does not name a type
		 static const GUID BLADE = 
					  ^
	RzChromaSDKDefines.h:67:18: error: ‘GUID’ does not name a type
		 static const GUID DEATHADDER_CHROMA = 
					  ^
	RzChromaSDKDefines.h:72:18: error: ‘GUID’ does not name a type
		 static const GUID MAMBA_CHROMA_TE = 
					  ^
	RzChromaSDKDefines.h:77:18: error: ‘GUID’ does not name a type
		 static const GUID DIAMONDBACK_CHROMA = 
					  ^
	RzChromaSDKDefines.h:82:18: error: ‘GUID’ does not name a type
		 static const GUID MAMBA_CHROMA = 
					  ^
	RzChromaSDKDefines.h:87:18: error: ‘GUID’ does not name a type
		 static const GUID NAGA_EPIC_CHROMA = 
					  ^
	RzChromaSDKDefines.h:92:18: error: ‘GUID’ does not name a type
		 static const GUID NAGA_CHROMA = 
					  ^
	RzChromaSDKDefines.h:97:18: error: ‘GUID’ does not name a type
		 static const GUID OROCHI_CHROMA = 
					  ^
	RzChromaSDKDefines.h:102:18: error: ‘GUID’ does not name a type
		 static const GUID NAGA_HEX_CHROMA = 
					  ^
	RzChromaSDKDefines.h:109:18: error: ‘GUID’ does not name a type
		 static const GUID KRAKEN71_CHROMA = 
					  ^
	RzChromaSDKDefines.h:114:18: error: ‘GUID’ does not name a type
		 static const GUID MANOWAR_CHROMA = 
					  ^
	RzChromaSDKDefines.h:121:18: error: ‘GUID’ does not name a type
		 static const GUID FIREFLY_CHROMA = 
					  ^
	RzChromaSDKDefines.h:128:18: error: ‘GUID’ does not name a type
		 static const GUID TARTARUS_CHROMA = 
					  ^
	RzChromaSDKDefines.h:133:18: error: ‘GUID’ does not name a type
		 static const GUID ORBWEAVER_CHROMA = 
					  ^
	RzChromaSDKDefines.h:139:18: error: ‘GUID’ does not name a type
		 static const GUID LENOVO_Y900 = 
					  ^
	RzChromaSDKDefines.h:143:18: error: ‘GUID’ does not name a type
		 static const GUID LENOVO_Y27 = 
					  ^
	RzChromaSDKDefines.h:149:18: error: ‘GUID’ does not name a type
		 static const GUID CORE_CHROMA = 
                  ^
	In file included from ChromaAPI.cpp:10:0:
	RzChromaSDKTypes.h:10:9: error: ‘GUID’ does not name a type
	 typedef GUID            RZEFFECTID;         //!< Effect Id.
			 ^
	RzChromaSDKTypes.h:11:9: error: ‘GUID’ does not name a type
	 typedef GUID            RZDEVICEID;         //!< Device Id.
         ^
	In file included from ChromaAPI.cpp:10:0:
	RzChromaSDKTypes.h:21:39: error: ‘WM_APP’ was not declared in this scope
	  const unsigned int WM_CHROMA_EVENT = WM_APP + 0x2000;
                                       ^
	In file included from ChromaAPI.cpp:13:0:
	ChromaAPI.h:32:86: error: ‘RZEFFECTID’ has not been declared
	  void createKeyboardEffect(ChromaSDK::Keyboard::EFFECT_TYPE effect, PRZPARAM pParam, RZEFFECTID *pEffectId);
                                                                                      ^
	ChromaAPI.h:33:80: error: ‘RZEFFECTID’ has not been declared
	  void createMouseEffect(ChromaSDK::Mouse::EFFECT_TYPE effect, PRZPARAM pParam, RZEFFECTID *pEffectId);
                                                                                ^
	ChromaAPI.h:34:84: error: ‘RZEFFECTID’ has not been declared
	  void createHeadsetEffect(ChromaSDK::Headset::EFFECT_TYPE effect, PRZPARAM pParam, RZEFFECTID *pEffectId);
                                                                                    ^
	ChromaAPI.h:35:86: error: ‘RZEFFECTID’ has not been declared
	  void createMousepadEffect(ChromaSDK::Mousepad::EFFECT_TYPE effect, PRZPARAM pParam, RZEFFECTID *pEffectId);
                                                                                      ^
	ChromaAPI.h:36:82: error: ‘RZEFFECTID’ has not been declared
	  void createKeypadEffect(ChromaSDK::Keypad::EFFECT_TYPE effect, PRZPARAM pParam, RZEFFECTID *pEffectId);
                                                                                  ^
In file included from ChromaAPI.cpp:31:0:
razerkbd_driver.h:71:15: error: field ‘lock’ has incomplete type ‘mutex’
  struct mutex lock;
               ^
razerkbd_driver.h:71:9: note: forward declaration of ‘struct mutex’
  struct mutex lock;
         ^
	razerkbd_driver.h:78:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razerkbd_attr_write_mode_game(struct razer_kbd_device* device, const char *buf, size_t count);
	 ^
	razerkbd_driver.h:79:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razerkbd_attr_read_mode_game(struct razer_kbd_device* device, char *buf);
	 ^
	razerkbd_driver.h:80:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razerkbd_attr_write_mode_macro(struct razer_kbd_device* device, const char *buf, size_t count);
	 ^
	razerkbd_driver.h:81:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razerkbd_attr_read_mode_macro(struct razer_kbd_device* device, char *buf);
	 ^
	razerkbd_driver.h:82:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razerkbd_attr_read_device_type(struct razer_kbd_device* device, char *buf);
	 ^
	razerkbd_driver.h:83:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razerkbd_attr_write_mode_macro_effect(struct razer_kbd_device* device, const char *buf, size_t count);
	 ^
	razerkbd_driver.h:84:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razerkbd_attr_read_mode_macro_effect(struct razer_kbd_device* device, char *buf);
	 ^
	razerkbd_driver.h:85:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razerkbd_attr_write_mode_pulsate(struct razer_kbd_device* device, const char *buf, size_t count);
	 ^
	razerkbd_driver.h:86:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razerkbd_attr_read_mode_pulsate(struct razer_kbd_device* device, char *buf);
	 ^
	razerkbd_driver.h:87:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razerkbd_attr_read_tartarus_profile_led_red(struct razer_kbd_device* device, char *buf);
	 ^
	razerkbd_driver.h:88:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razerkbd_attr_read_tartarus_profile_led_green(struct razer_kbd_device* device, char *buf);
	 ^
	razerkbd_driver.h:89:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razerkbd_attr_read_tartarus_profile_led_blue(struct razer_kbd_device* device, char *buf);
	 ^
	razerkbd_driver.h:90:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razerkbd_attr_write_tartarus_profile_led_red(struct razer_kbd_device* device, const char *buf, size_t count);
	 ^
	razerkbd_driver.h:91:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razerkbd_attr_write_tartarus_profile_led_green(struct razer_kbd_device* device, const char *buf, size_t count);
	 ^
	razerkbd_driver.h:92:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razerkbd_attr_write_tartarus_profile_led_blue(struct razer_kbd_device* device, const char *buf, size_t count);
	 ^
	razerkbd_driver.h:93:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razerkbd_attr_read_get_serial(struct razer_kbd_device* device, char *buf);
	 ^
	razerkbd_driver.h:94:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razerkbd_attr_read_get_firmware_version(struct razer_kbd_device* device, char *buf);
	 ^
	razerkbd_driver.h:96:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razerkbd_attr_write_mode_none(struct razer_kbd_device* device, const char *buf, size_t count);
	 ^
	razerkbd_driver.h:97:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razerkbd_attr_write_mode_wave(struct razer_kbd_device* device, const char *buf, size_t count);
	 ^
	razerkbd_driver.h:98:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razerkbd_attr_write_mode_spectrum(struct razer_kbd_device* device, const char *buf, size_t count);
	 ^
	razerkbd_driver.h:99:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razerkbd_attr_write_mode_reactive(struct razer_kbd_device* device, const char *buf, size_t count);
	 ^
	razerkbd_driver.h:100:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razerkbd_attr_write_mode_static(struct razer_kbd_device* device, const char *buf, size_t count);
	 ^
	razerkbd_driver.h:101:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razerkbd_attr_write_mode_starlight(struct razer_kbd_device* device, const char *buf, size_t count);
	 ^
	razerkbd_driver.h:102:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razerkbd_attr_write_mode_breath(struct razer_kbd_device* device, const char *buf, size_t count);
	 ^
	razerkbd_driver.h:103:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razerkbd_attr_write_set_logo(struct razer_kbd_device* device, const char *buf, size_t count);
	 ^
	razerkbd_driver.h:104:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razerkbd_attr_write_mode_custom(struct razer_kbd_device* device, const char *buf, size_t count);
	 ^
	razerkbd_driver.h:105:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razerkbd_attr_write_set_fn_toggle(struct razer_kbd_device* device, const char *buf, size_t count);
	 ^
	razerkbd_driver.h:106:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razerkbd_attr_write_set_brightness(struct razer_kbd_device* device, const char *buf, size_t count);
	 ^
	razerkbd_driver.h:107:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razerkbd_attr_read_set_brightness(struct razer_kbd_device* device, char *buf);
	 ^
	razerkbd_driver.h:109:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razerkbd_attr_write_device_mode(struct razer_kbd_device* device, const char *buf, size_t count);
	 ^
	razerkbd_driver.h:110:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razerkbd_attr_read_device_mode(struct razer_kbd_device* device, char *buf);
	 ^
	razerkbd_driver.h:111:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razerkbd_attr_write_matrix_custom_frame(struct razer_kbd_device* device, const char *buf, size_t count);
	 ^
In file included from ChromaAPI.cpp:32:0:
razermouse_driver.h:24:15: error: field ‘lock’ has incomplete type ‘mutex’
  struct mutex lock;
               ^
In file included from ChromaAPI.cpp:31:0:
razerkbd_driver.h:71:9: note: forward declaration of ‘struct mutex’
  struct mutex lock;
         ^
	In file included from ChromaAPI.cpp:32:0:
	razermouse_driver.h:45:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermouse_attr_read_device_type(struct razer_mouse_device *device, char *buf);
	 ^
	razermouse_driver.h:46:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermouse_attr_read_get_firmware_version(struct razer_mouse_device *device, char *buf);
	 ^
	razermouse_driver.h:47:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermouse_attr_write_test(struct razer_mouse_device *device, const char *buf, size_t count);
	 ^
	razermouse_driver.h:48:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermouse_attr_write_mode_none(struct razer_mouse_device *device, const char *buf, size_t count);
	 ^
	razermouse_driver.h:49:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermouse_attr_write_mode_static(struct razer_mouse_device *device, const char *buf, size_t count);
	 ^
	razermouse_driver.h:50:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermouse_attr_write_mode_wave(struct razer_mouse_device *device, const char *buf, size_t count);
	 ^
	razermouse_driver.h:51:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermouse_attr_write_mode_spectrum(struct razer_mouse_device *device, const char *buf, size_t count);
	 ^
	razermouse_driver.h:52:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermouse_attr_write_mode_reactive(struct razer_mouse_device *device, const char *buf, size_t count);
	 ^
	razermouse_driver.h:53:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermouse_attr_write_mode_breath(struct razer_mouse_device *device, const char *buf, size_t count);
	 ^
	razermouse_driver.h:54:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermouse_attr_read_get_serial(struct razer_mouse_device *device, char *buf);
	 ^
	razermouse_driver.h:55:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermouse_attr_read_get_battery(struct razer_mouse_device *device, char *buf);
	 ^
	razermouse_driver.h:56:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermouse_attr_read_is_charging(struct razer_mouse_device *device, char *buf);
	 ^
	razermouse_driver.h:57:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermouse_attr_write_set_charging_effect(struct razer_mouse_device *device, const char *buf, size_t count);
	 ^
	razermouse_driver.h:58:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermouse_attr_write_set_charging_colour(struct razer_mouse_device *device, const char *buf, size_t count);
	 ^
	razermouse_driver.h:59:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermouse_attr_read_poll_rate(struct razer_mouse_device *device, char *buf);
	 ^
	razermouse_driver.h:60:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermouse_attr_write_poll_rate(struct razer_mouse_device *device, const char *buf, size_t count);
	 ^
	razermouse_driver.h:61:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermouse_attr_write_set_brightness(struct razer_mouse_device *device, const char *buf, size_t count);
	 ^
	razermouse_driver.h:62:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermouse_attr_read_set_brightness(struct razer_mouse_device *device, char *buf);
	 ^
	razermouse_driver.h:63:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermouse_attr_write_mouse_dpi(struct razer_mouse_device *device, const char *buf, size_t count);
	 ^
	razermouse_driver.h:64:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermouse_attr_read_mouse_dpi(struct razer_mouse_device *device, char *buf);
	 ^
	razermouse_driver.h:65:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermouse_attr_write_set_idle_time(struct razer_mouse_device *device, const char *buf, size_t count);
	 ^
	razermouse_driver.h:66:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermouse_attr_write_set_low_battery_threshold(struct razer_mouse_device *device, const char *buf, size_t count);
	 ^
	razermouse_driver.h:67:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermouse_attr_write_set_key_row(struct razer_mouse_device *device, const char *buf, size_t count);
	 ^
	razermouse_driver.h:68:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermouse_attr_write_device_mode(struct razer_mouse_device *device, const char *buf, size_t count);
	 ^
	razermouse_driver.h:69:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermouse_attr_read_device_mode(struct razer_mouse_device *device, char *buf);
	 ^
	razermouse_driver.h:70:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermouse_attr_read_scroll_led_brightness(struct razer_mouse_device *device, char *buf);
	 ^
	razermouse_driver.h:71:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermouse_attr_write_scroll_led_brightness(struct razer_mouse_device *device, const char *buf, size_t count);
	 ^
	razermouse_driver.h:72:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermouse_attr_read_logo_led_brightness(struct razer_mouse_device *device, char *buf);
	 ^
	razermouse_driver.h:73:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermouse_attr_write_logo_led_brightness(struct razer_mouse_device *device, const char *buf, size_t count);
	 ^
	razermouse_driver.h:74:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermouse_attr_write_scroll_led_state(struct razer_mouse_device *device, const char *buf, size_t count);
	 ^
	razermouse_driver.h:75:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermouse_attr_read_scroll_led_state(struct razer_mouse_device *device, char *buf);
	 ^
	razermouse_driver.h:76:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermouse_attr_write_logo_led_state(struct razer_mouse_device *device, const char *buf, size_t count);
	 ^
	razermouse_driver.h:77:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermouse_attr_read_logo_led_state(struct razer_mouse_device *device, char *buf);
	 ^
	razermouse_driver.h:78:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermouse_attr_write_scroll_led_rgb(struct razer_mouse_device *device, const char *buf, size_t count);
	 ^
	razermouse_driver.h:79:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermouse_attr_read_scroll_led_rgb(struct razer_mouse_device *device, char *buf);
	 ^
	razermouse_driver.h:80:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermouse_attr_write_logo_led_rgb(struct razer_mouse_device *device, const char *buf, size_t count);
	 ^
	razermouse_driver.h:81:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermouse_attr_read_logo_led_rgb(struct razer_mouse_device *device, char *buf);
	 ^
	razermouse_driver.h:82:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermouse_attr_write_scroll_led_effect(struct razer_mouse_device *device, const char *buf, size_t count);
	 ^
	razermouse_driver.h:83:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermouse_attr_read_scroll_led_effect(struct razer_mouse_device *device, char *buf);
	 ^
	razermouse_driver.h:84:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermouse_attr_write_logo_led_effect(struct razer_mouse_device *device, const char *buf, size_t count);
	 ^
	razermouse_driver.h:85:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermouse_attr_read_logo_led_effect(struct razer_mouse_device *device, char *buf);
	 ^
	razermouse_driver.h:86:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermouse_attr_write_scroll_mode_spectrum(struct razer_mouse_device *device, const char *buf, size_t count);
	 ^
	razermouse_driver.h:87:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermouse_attr_write_scroll_mode_reactive(struct razer_mouse_device *device, const char *buf, size_t count);
	 ^
	razermouse_driver.h:88:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermouse_attr_write_scroll_mode_breath(struct razer_mouse_device *device, const char *buf, size_t count);
	 ^
	razermouse_driver.h:89:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermouse_attr_write_scroll_mode_static(struct razer_mouse_device *device, const char *buf, size_t count);
	 ^
	razermouse_driver.h:90:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermouse_attr_write_scroll_mode_none(struct razer_mouse_device *device, const char *buf, size_t count);
	 ^
	razermouse_driver.h:91:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermouse_attr_write_logo_mode_spectrum(struct razer_mouse_device *device, const char *buf, size_t count);
	 ^
	razermouse_driver.h:92:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermouse_attr_write_logo_mode_reactive(struct razer_mouse_device *device, const char *buf, size_t count);
	 ^
	razermouse_driver.h:93:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermouse_attr_write_logo_mode_breath(struct razer_mouse_device *device, const char *buf, size_t count);
	 ^
	razermouse_driver.h:94:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermouse_attr_write_logo_mode_static(struct razer_mouse_device *device, const char *buf, size_t count);
	 ^
	razermouse_driver.h:95:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermouse_attr_write_logo_mode_none(struct razer_mouse_device *device, const char *buf, size_t count);
	 ^
	razermouse_driver.h:96:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermouse_attr_write_matrix_custom_frame(struct razer_mouse_device *device, const char *buf, size_t count);
	 ^
	razermouse_driver.h:97:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermouse_attr_write_mode_custom(struct razer_mouse_device *device, const char *buf, size_t count);
	 ^
	In file included from ChromaAPI.cpp:33:0:
	razerfirefly_driver.h:30:15: error: field ‘lock’ has incomplete type ‘mutex’
	  struct mutex lock;
				   ^
	In file included from ChromaAPI.cpp:31:0:
	razerkbd_driver.h:71:9: note: forward declaration of ‘struct mutex’
	  struct mutex lock;
			 ^
	In file included from ChromaAPI.cpp:33:0:
	razerfirefly_driver.h:35:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razerfirefly_attr_write_mode_static(struct razer_firefly_device *device, const char *buf, size_t count);
	 ^
	razerfirefly_driver.h:36:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razerfirefly_attr_read_set_brightness(struct razer_firefly_device *device, char *buf);
	 ^
	razerfirefly_driver.h:37:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razerfirefly_attr_write_set_brightness(struct razer_firefly_device *device, const char *buf, size_t count);
	 ^
	razerfirefly_driver.h:38:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razerfirefly_attr_read_get_firmware_version(struct razer_firefly_device *device, char *buf);
	 ^
	razerfirefly_driver.h:39:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razerfirefly_attr_read_device_type(struct razer_firefly_device *device, char *buf);
	 ^
	razerfirefly_driver.h:40:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razerfirefly_attr_read_get_serial(struct razer_firefly_device *device, char *buf);
	 ^
	razerfirefly_driver.h:41:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razerfirefly_attr_write_mode_none(struct razer_firefly_device *device, const char *buf, size_t count);
	 ^
	razerfirefly_driver.h:42:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razerfirefly_attr_write_mode_wave(struct razer_firefly_device *device, const char *buf, size_t count);
	 ^
	razerfirefly_driver.h:43:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razerfirefly_attr_write_mode_spectrum(struct razer_firefly_device *device, const char *buf, size_t count);
	 ^
	razerfirefly_driver.h:44:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razerfirefly_attr_write_mode_reactive(struct razer_firefly_device *device, const char *buf, size_t count);
	 ^
	razerfirefly_driver.h:45:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razerfirefly_attr_write_mode_breath(struct razer_firefly_device *device, const char *buf, size_t count);
	 ^
	razerfirefly_driver.h:46:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razerfirefly_attr_write_mode_custom(struct razer_firefly_device *device, const char *buf, size_t count);
	 ^
	razerfirefly_driver.h:47:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razerfirefly_attr_write_set_key_row(struct razer_firefly_device *device, const char *buf, size_t count);
	 ^
	razerfirefly_driver.h:48:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razerfirefly_attr_write_device_mode(struct razer_firefly_device *device, const char *buf, size_t count);
	 ^
	razerfirefly_driver.h:49:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razerfirefly_attr_read_device_mode(struct razer_firefly_device *device, char *buf);
	 ^
	In file included from ChromaAPI.cpp:34:0:
	razerkraken_driver.h:9:15: error: field ‘lock’ has incomplete type ‘mutex’
	  struct mutex lock;
				   ^
	In file included from ChromaAPI.cpp:31:0:
	razerkbd_driver.h:71:9: note: forward declaration of ‘struct mutex’
	  struct mutex lock;
			 ^
	In file included from ChromaAPI.cpp:34:0:
	razerkraken_driver.h:134:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razerkraken_attr_write_mode_static(struct razer_kraken_device *device, const char *buf, size_t count);
	 ^
	razerkraken_driver.h:135:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razerkraken_attr_read_device_type(struct razer_kraken_device *device, char *buf);
	 ^
	razerkraken_driver.h:136:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razerkraken_attr_write_mode_spectrum(struct razer_kraken_device *device, const char *buf, size_t count);
	 ^
	razerkraken_driver.h:137:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razerkraken_attr_write_mode_none(struct razer_kraken_device *device, const char *buf, size_t count);
	 ^
	razerkraken_driver.h:138:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razerkraken_attr_read_mode_static(struct razer_kraken_device *device, char *buf);
	 ^
	razerkraken_driver.h:139:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razerkraken_attr_write_mode_breath(struct razer_kraken_device *device, const char *buf, size_t count);
	 ^
	razerkraken_driver.h:140:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razerkraken_attr_read_mode_breath(struct razer_kraken_device *device, char *buf);
	 ^
	razerkraken_driver.h:141:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razerkraken_attr_read_get_serial(struct razer_kraken_device *device, char *buf);
	 ^
	razerkraken_driver.h:142:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razerkraken_attr_read_get_firmware_version(struct razer_kraken_device *device, char *buf);
	 ^
	razerkraken_driver.h:143:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razerkraken_attr_read_matrix_current_effect(struct razer_kraken_device *device, char *buf);
	 ^
	In file included from ChromaAPI.cpp:35:0:
	razermug_driver.h:8:15: error: field ‘lock’ has incomplete type ‘mutex’
	  struct mutex lock;
				   ^
	In file included from ChromaAPI.cpp:31:0:
	razerkbd_driver.h:71:9: note: forward declaration of ‘struct mutex’
	  struct mutex lock;
			 ^
	In file included from ChromaAPI.cpp:35:0:
	razermug_driver.h:15:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermug_attr_write_mode_static(struct razer_mug_device* device, const char *buf, size_t count);
	 ^
	razermug_driver.h:16:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermug_attr_read_device_type(struct razer_mug_device* device, char *buf);
	 ^
	razermug_driver.h:17:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermug_attr_write_mode_spectrum(struct razer_mug_device* device, const char *buf, size_t count);
	 ^
	razermug_driver.h:18:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermug_attr_write_mode_none(struct razer_mug_device* device, const char *buf, size_t count);
	 ^
	razermug_driver.h:19:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermug_attr_write_mode_blinking(struct razer_mug_device* device, const char *buf, size_t count);
	 ^
	razermug_driver.h:20:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermug_attr_write_mode_wave(struct razer_mug_device* device, const char *buf, size_t count);
	 ^
	razermug_driver.h:21:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermug_attr_write_mode_breath(struct razer_mug_device* device, const char *buf, size_t count);
	 ^
	razermug_driver.h:22:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermug_attr_read_get_serial(struct razer_mug_device* device, char *buf);
	 ^
	razermug_driver.h:23:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermug_attr_read_get_firmware_version(struct razer_mug_device* device, char *buf);
	 ^
	razermug_driver.h:24:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermug_attr_write_device_mode(struct razer_mug_device* device, const char *buf, size_t count);
	 ^
	razermug_driver.h:25:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermug_attr_read_get_cup_state(struct razer_mug_device* device, char *buf);
	 ^
	razermug_driver.h:26:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermug_attr_read_device_mode(struct razer_mug_device* device, char *buf);
	 ^
	razermug_driver.h:27:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermug_attr_write_set_brightness(struct razer_mug_device* device, const char *buf, size_t count);
	 ^
	razermug_driver.h:28:1: error: ‘SSIZE_T’ does not name a type
	 SSIZE_T razermug_attr_read_set_brightness(struct razer_mug_device* device, char *buf);
	 ^
	ChromaAPI.cpp:63:102: error: ‘INT’ has not been declared
	 struct usb_interface_descriptor* usb_find_interface(struct usb_config_descriptor* config_descriptor, INT interface_number, INT alt_interface_number, struct usb_interface_descriptor** first_interface) {
																										  ^
	ChromaAPI.cpp:63:124: error: ‘INT’ has not been declared
	 struct usb_interface_descriptor* usb_find_interface(struct usb_config_descriptor* config_descriptor, INT interface_number, INT alt_interface_number, struct usb_interface_descriptor** first_interface) {
																																^
	ChromaAPI.cpp: In function ‘usb_interface_descriptor* usb_find_interface(usb_config_descriptor*, int, int, usb_interface_descriptor**)’:
	ChromaAPI.cpp:68:22: error: ‘NULL’ was not declared in this scope
	   *first_interface = NULL;
						  ^
	ChromaAPI.cpp:71:10: error: ‘NULL’ was not declared in this scope
	   return NULL;
          ^
ChromaAPI.cpp:73:51: error: invalid use of incomplete type ‘struct usb_config_descriptor’
  for (intfIndex = 0; intfIndex < config_descriptor->bNumInterfaces; intfIndex++)
                                                   ^
ChromaAPI.cpp:63:60: note: forward declaration of ‘struct usb_config_descriptor’
 struct usb_interface_descriptor* usb_find_interface(struct usb_config_descriptor* config_descriptor, INT interface_number, INT alt_interface_number, struct usb_interface_descriptor** first_interface) {
                                                            ^
ChromaAPI.cpp:74:24: error: invalid use of incomplete type ‘struct usb_config_descriptor’
   if (config_descriptor->interface[intfIndex].num_altsetting) {
                        ^
ChromaAPI.cpp:63:60: note: forward declaration of ‘struct usb_config_descriptor’
 struct usb_interface_descriptor* usb_find_interface(struct usb_config_descriptor* config_descriptor, INT interface_number, INT alt_interface_number, struct usb_interface_descriptor** first_interface) {
                                                            ^
ChromaAPI.cpp:75:29: error: invalid use of incomplete type ‘struct usb_config_descriptor’
    intf = &config_descriptor->interface[intfIndex].altsetting[0];
                             ^
ChromaAPI.cpp:63:60: note: forward declaration of ‘struct usb_config_descriptor’
 struct usb_interface_descriptor* usb_find_interface(struct usb_config_descriptor* config_descriptor, INT interface_number, INT alt_interface_number, struct usb_interface_descriptor** first_interface) {
                                                            ^
ChromaAPI.cpp:76:49: error: ‘NULL’ was not declared in this scope
    if ((first_interface) && *first_interface == NULL)
                                                 ^
ChromaAPI.cpp:78:12: error: invalid use of incomplete type ‘struct usb_interface_descriptor’
    if (intf->bInterfaceNumber == interface_number && (alt_interface_number == -1 || intf->bAlternateSetting == alt_interface_number))
            ^
ChromaAPI.cpp:63:8: note: forward declaration of ‘struct usb_interface_descriptor’
 struct usb_interface_descriptor* usb_find_interface(struct usb_config_descriptor* config_descriptor, INT interface_number, INT alt_interface_number, struct usb_interface_descriptor** first_interface) {
        ^
ChromaAPI.cpp:78:89: error: invalid use of incomplete type ‘struct usb_interface_descriptor’
    if (intf->bInterfaceNumber == interface_number && (alt_interface_number == -1 || intf->bAlternateSetting == alt_interface_number))
                                                                                         ^
ChromaAPI.cpp:63:8: note: forward declaration of ‘struct usb_interface_descriptor’
 struct usb_interface_descriptor* usb_find_interface(struct usb_config_descriptor* config_descriptor, INT interface_number, INT alt_interface_number, struct usb_interface_descriptor** first_interface) {
        ^
ChromaAPI.cpp:82:9: error: ‘NULL’ was not declared in this scope
  return NULL;
         ^
ChromaAPI.cpp: At global scope:
ChromaAPI.cpp:85:35: error: ‘WORD’ was not declared in this scope
 struct usb_dev_handle* chromaOpen(WORD vid, WORD pid, INT interfaceNumber, INT altInterfaceNumber, struct usb_device** deviceForHandle) {
                                   ^
ChromaAPI.cpp:85:45: error: ‘WORD’ was not declared in this scope
 struct usb_dev_handle* chromaOpen(WORD vid, WORD pid, INT interfaceNumber, INT altInterfaceNumber, struct usb_device** deviceForHandle) {
                                             ^
ChromaAPI.cpp:85:55: error: ‘INT’ was not declared in this scope
 struct usb_dev_handle* chromaOpen(WORD vid, WORD pid, INT interfaceNumber, INT altInterfaceNumber, struct usb_device** deviceForHandle) {
                                                       ^
ChromaAPI.cpp:85:76: error: ‘INT’ was not declared in this scope
 struct usb_dev_handle* chromaOpen(WORD vid, WORD pid, INT interfaceNumber, INT altInterfaceNumber, struct usb_device** deviceForHandle) {
                                                                            ^
ChromaAPI.cpp:85:100: error: expected primary-expression before ‘struct’
 struct usb_dev_handle* chromaOpen(WORD vid, WORD pid, INT interfaceNumber, INT altInterfaceNumber, struct usb_device** deviceForHandle) {
                                                                                                    ^
ChromaAPI.cpp:85:135: error: expression list treated as compound expression in initializer [-fpermissive]
 struct usb_dev_handle* chromaOpen(WORD vid, WORD pid, INT interfaceNumber, INT altInterfaceNumber, struct usb_device** deviceForHandle) {
                                                                                                                                       ^
ChromaAPI.cpp:85:137: error: expected ‘,’ or ‘;’ before ‘{’ token
 struct usb_dev_handle* chromaOpen(WORD vid, WORD pid, INT interfaceNumber, INT altInterfaceNumber, struct usb_device** deviceForHandle) {
                                                                                                                                         ^
make: *** [ChromaAPI.o] Error 1
In file included from ChromaAPI.cpp:9:0:
RzChromaSDKDefines.h:20:18: error: ‘GUID’ does not name a type
     static const GUID BLACKWIDOW_CHROMA = 
                  ^
RzChromaSDKDefines.h:25:18: error: ‘GUID’ does not name a type
     static const GUID BLACKWIDOW_CHROMA_TE = 
                  ^
RzChromaSDKDefines.h:30:18: error: ‘GUID’ does not name a type
     static const GUID DEATHSTALKER_CHROMA = 
                  ^
RzChromaSDKDefines.h:35:18: error: ‘GUID’ does not name a type
     static const GUID OVERWATCH_KEYBOARD = 
                  ^
RzChromaSDKDefines.h:40:18: error: ‘GUID’ does not name a type
     static const GUID BLACKWIDOW_X_CHROMA = 
                  ^
RzChromaSDKDefines.h:45:18: error: ‘GUID’ does not name a type
     static const GUID BLACKWIDOW_X_TE_CHROMA = 
                  ^
RzChromaSDKDefines.h:50:18: error: ‘GUID’ does not name a type
     static const GUID ORNATA_CHROMA =
                  ^
RzChromaSDKDefines.h:55:18: error: ‘GUID’ does not name a type
     static const GUID BLADE_STEALTH = 
                  ^
RzChromaSDKDefines.h:60:18: error: ‘GUID’ does not name a type
     static const GUID BLADE = 
                  ^
RzChromaSDKDefines.h:67:18: error: ‘GUID’ does not name a type
     static const GUID DEATHADDER_CHROMA = 
                  ^
RzChromaSDKDefines.h:72:18: error: ‘GUID’ does not name a type
     static const GUID MAMBA_CHROMA_TE = 
                  ^
RzChromaSDKDefines.h:77:18: error: ‘GUID’ does not name a type
     static const GUID DIAMONDBACK_CHROMA = 
                  ^
RzChromaSDKDefines.h:82:18: error: ‘GUID’ does not name a type
     static const GUID MAMBA_CHROMA = 
                  ^
RzChromaSDKDefines.h:87:18: error: ‘GUID’ does not name a type
     static const GUID NAGA_EPIC_CHROMA = 
                  ^
RzChromaSDKDefines.h:92:18: error: ‘GUID’ does not name a type
     static const GUID NAGA_CHROMA = 
                  ^
RzChromaSDKDefines.h:97:18: error: ‘GUID’ does not name a type
     static const GUID OROCHI_CHROMA = 
                  ^
RzChromaSDKDefines.h:102:18: error: ‘GUID’ does not name a type
     static const GUID NAGA_HEX_CHROMA = 
                  ^
RzChromaSDKDefines.h:109:18: error: ‘GUID’ does not name a type
     static const GUID KRAKEN71_CHROMA = 
                  ^
RzChromaSDKDefines.h:114:18: error: ‘GUID’ does not name a type
     static const GUID MANOWAR_CHROMA = 
                  ^
RzChromaSDKDefines.h:121:18: error: ‘GUID’ does not name a type
     static const GUID FIREFLY_CHROMA = 
                  ^
RzChromaSDKDefines.h:128:18: error: ‘GUID’ does not name a type
     static const GUID TARTARUS_CHROMA = 
                  ^
RzChromaSDKDefines.h:133:18: error: ‘GUID’ does not name a type
     static const GUID ORBWEAVER_CHROMA = 
                  ^
RzChromaSDKDefines.h:139:18: error: ‘GUID’ does not name a type
     static const GUID LENOVO_Y900 = 
                  ^
RzChromaSDKDefines.h:143:18: error: ‘GUID’ does not name a type
     static const GUID LENOVO_Y27 = 
                  ^
RzChromaSDKDefines.h:149:18: error: ‘GUID’ does not name a type
     static const GUID CORE_CHROMA = 
                  ^
In file included from ChromaAPI.cpp:10:0:
RzChromaSDKTypes.h:10:9: error: ‘GUID’ does not name a type
 typedef GUID            RZEFFECTID;         //!< Effect Id.
         ^
RzChromaSDKTypes.h:11:9: error: ‘GUID’ does not name a type
 typedef GUID            RZDEVICEID;         //!< Device Id.
         ^
In file included from ChromaAPI.cpp:10:0:
RzChromaSDKTypes.h:21:39: error: ‘WM_APP’ was not declared in this scope
  const unsigned int WM_CHROMA_EVENT = WM_APP + 0x2000;
                                       ^
In file included from ChromaAPI.cpp:13:0:
ChromaAPI.h:32:86: error: ‘RZEFFECTID’ has not been declared
  void createKeyboardEffect(ChromaSDK::Keyboard::EFFECT_TYPE effect, PRZPARAM pParam, RZEFFECTID *pEffectId);
                                                                                      ^
ChromaAPI.h:33:80: error: ‘RZEFFECTID’ has not been declared
  void createMouseEffect(ChromaSDK::Mouse::EFFECT_TYPE effect, PRZPARAM pParam, RZEFFECTID *pEffectId);
                                                                                ^
ChromaAPI.h:34:84: error: ‘RZEFFECTID’ has not been declared
  void createHeadsetEffect(ChromaSDK::Headset::EFFECT_TYPE effect, PRZPARAM pParam, RZEFFECTID *pEffectId);
                                                                                    ^
ChromaAPI.h:35:86: error: ‘RZEFFECTID’ has not been declared
  void createMousepadEffect(ChromaSDK::Mousepad::EFFECT_TYPE effect, PRZPARAM pParam, RZEFFECTID *pEffectId);
                                                                                      ^
ChromaAPI.h:36:82: error: ‘RZEFFECTID’ has not been declared
  void createKeypadEffect(ChromaSDK::Keypad::EFFECT_TYPE effect, PRZPARAM pParam, RZEFFECTID *pEffectId);
                                                                                  ^
In file included from ChromaAPI.cpp:31:0:
razerkbd_driver.h:71:15: error: field ‘lock’ has incomplete type ‘mutex’
  struct mutex lock;
               ^
razerkbd_driver.h:71:9: note: forward declaration of ‘struct mutex’
  struct mutex lock;
         ^
razerkbd_driver.h:78:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_write_mode_game(struct razer_kbd_device* device, const char *buf, size_t count);
 ^
razerkbd_driver.h:79:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_read_mode_game(struct razer_kbd_device* device, char *buf);
 ^
razerkbd_driver.h:80:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_write_mode_macro(struct razer_kbd_device* device, const char *buf, size_t count);
 ^
razerkbd_driver.h:81:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_read_mode_macro(struct razer_kbd_device* device, char *buf);
 ^
razerkbd_driver.h:82:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_read_device_type(struct razer_kbd_device* device, char *buf);
 ^
razerkbd_driver.h:83:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_write_mode_macro_effect(struct razer_kbd_device* device, const char *buf, size_t count);
 ^
razerkbd_driver.h:84:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_read_mode_macro_effect(struct razer_kbd_device* device, char *buf);
 ^
razerkbd_driver.h:85:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_write_mode_pulsate(struct razer_kbd_device* device, const char *buf, size_t count);
 ^
razerkbd_driver.h:86:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_read_mode_pulsate(struct razer_kbd_device* device, char *buf);
 ^
razerkbd_driver.h:87:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_read_tartarus_profile_led_red(struct razer_kbd_device* device, char *buf);
 ^
razerkbd_driver.h:88:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_read_tartarus_profile_led_green(struct razer_kbd_device* device, char *buf);
 ^
razerkbd_driver.h:89:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_read_tartarus_profile_led_blue(struct razer_kbd_device* device, char *buf);
 ^
razerkbd_driver.h:90:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_write_tartarus_profile_led_red(struct razer_kbd_device* device, const char *buf, size_t count);
 ^
razerkbd_driver.h:91:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_write_tartarus_profile_led_green(struct razer_kbd_device* device, const char *buf, size_t count);
 ^
razerkbd_driver.h:92:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_write_tartarus_profile_led_blue(struct razer_kbd_device* device, const char *buf, size_t count);
 ^
razerkbd_driver.h:93:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_read_get_serial(struct razer_kbd_device* device, char *buf);
 ^
razerkbd_driver.h:94:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_read_get_firmware_version(struct razer_kbd_device* device, char *buf);
 ^
razerkbd_driver.h:96:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_write_mode_none(struct razer_kbd_device* device, const char *buf, size_t count);
 ^
razerkbd_driver.h:97:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_write_mode_wave(struct razer_kbd_device* device, const char *buf, size_t count);
 ^
razerkbd_driver.h:98:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_write_mode_spectrum(struct razer_kbd_device* device, const char *buf, size_t count);
 ^
razerkbd_driver.h:99:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_write_mode_reactive(struct razer_kbd_device* device, const char *buf, size_t count);
 ^
razerkbd_driver.h:100:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_write_mode_static(struct razer_kbd_device* device, const char *buf, size_t count);
 ^
razerkbd_driver.h:101:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_write_mode_starlight(struct razer_kbd_device* device, const char *buf, size_t count);
 ^
razerkbd_driver.h:102:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_write_mode_breath(struct razer_kbd_device* device, const char *buf, size_t count);
 ^
razerkbd_driver.h:103:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_write_set_logo(struct razer_kbd_device* device, const char *buf, size_t count);
 ^
razerkbd_driver.h:104:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_write_mode_custom(struct razer_kbd_device* device, const char *buf, size_t count);
 ^
razerkbd_driver.h:105:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_write_set_fn_toggle(struct razer_kbd_device* device, const char *buf, size_t count);
 ^
razerkbd_driver.h:106:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_write_set_brightness(struct razer_kbd_device* device, const char *buf, size_t count);
 ^
razerkbd_driver.h:107:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_read_set_brightness(struct razer_kbd_device* device, char *buf);
 ^
razerkbd_driver.h:109:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_write_device_mode(struct razer_kbd_device* device, const char *buf, size_t count);
 ^
razerkbd_driver.h:110:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_read_device_mode(struct razer_kbd_device* device, char *buf);
 ^
razerkbd_driver.h:111:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_write_matrix_custom_frame(struct razer_kbd_device* device, const char *buf, size_t count);
 ^
In file included from ChromaAPI.cpp:32:0:
razermouse_driver.h:24:15: error: field ‘lock’ has incomplete type ‘mutex’
  struct mutex lock;
               ^
In file included from ChromaAPI.cpp:31:0:
razerkbd_driver.h:71:9: note: forward declaration of ‘struct mutex’
  struct mutex lock;
         ^
In file included from ChromaAPI.cpp:32:0:
razermouse_driver.h:45:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_read_device_type(struct razer_mouse_device *device, char *buf);
 ^
razermouse_driver.h:46:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_read_get_firmware_version(struct razer_mouse_device *device, char *buf);
 ^
razermouse_driver.h:47:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_test(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:48:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_mode_none(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:49:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_mode_static(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:50:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_mode_wave(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:51:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_mode_spectrum(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:52:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_mode_reactive(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:53:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_mode_breath(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:54:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_read_get_serial(struct razer_mouse_device *device, char *buf);
 ^
razermouse_driver.h:55:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_read_get_battery(struct razer_mouse_device *device, char *buf);
 ^
razermouse_driver.h:56:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_read_is_charging(struct razer_mouse_device *device, char *buf);
 ^
razermouse_driver.h:57:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_set_charging_effect(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:58:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_set_charging_colour(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:59:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_read_poll_rate(struct razer_mouse_device *device, char *buf);
 ^
razermouse_driver.h:60:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_poll_rate(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:61:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_set_brightness(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:62:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_read_set_brightness(struct razer_mouse_device *device, char *buf);
 ^
razermouse_driver.h:63:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_mouse_dpi(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:64:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_read_mouse_dpi(struct razer_mouse_device *device, char *buf);
 ^
razermouse_driver.h:65:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_set_idle_time(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:66:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_set_low_battery_threshold(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:67:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_set_key_row(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:68:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_device_mode(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:69:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_read_device_mode(struct razer_mouse_device *device, char *buf);
 ^
razermouse_driver.h:70:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_read_scroll_led_brightness(struct razer_mouse_device *device, char *buf);
 ^
razermouse_driver.h:71:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_scroll_led_brightness(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:72:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_read_logo_led_brightness(struct razer_mouse_device *device, char *buf);
 ^
razermouse_driver.h:73:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_logo_led_brightness(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:74:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_scroll_led_state(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:75:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_read_scroll_led_state(struct razer_mouse_device *device, char *buf);
 ^
razermouse_driver.h:76:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_logo_led_state(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:77:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_read_logo_led_state(struct razer_mouse_device *device, char *buf);
 ^
razermouse_driver.h:78:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_scroll_led_rgb(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:79:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_read_scroll_led_rgb(struct razer_mouse_device *device, char *buf);
 ^
razermouse_driver.h:80:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_logo_led_rgb(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:81:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_read_logo_led_rgb(struct razer_mouse_device *device, char *buf);
 ^
razermouse_driver.h:82:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_scroll_led_effect(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:83:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_read_scroll_led_effect(struct razer_mouse_device *device, char *buf);
 ^
razermouse_driver.h:84:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_logo_led_effect(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:85:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_read_logo_led_effect(struct razer_mouse_device *device, char *buf);
 ^
razermouse_driver.h:86:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_scroll_mode_spectrum(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:87:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_scroll_mode_reactive(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:88:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_scroll_mode_breath(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:89:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_scroll_mode_static(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:90:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_scroll_mode_none(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:91:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_logo_mode_spectrum(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:92:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_logo_mode_reactive(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:93:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_logo_mode_breath(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:94:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_logo_mode_static(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:95:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_logo_mode_none(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:96:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_matrix_custom_frame(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:97:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_mode_custom(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
In file included from ChromaAPI.cpp:33:0:
razerfirefly_driver.h:30:15: error: field ‘lock’ has incomplete type ‘mutex’
  struct mutex lock;
               ^
In file included from ChromaAPI.cpp:31:0:
razerkbd_driver.h:71:9: note: forward declaration of ‘struct mutex’
  struct mutex lock;
         ^
In file included from ChromaAPI.cpp:33:0:
razerfirefly_driver.h:35:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerfirefly_attr_write_mode_static(struct razer_firefly_device *device, const char *buf, size_t count);
 ^
razerfirefly_driver.h:36:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerfirefly_attr_read_set_brightness(struct razer_firefly_device *device, char *buf);
 ^
razerfirefly_driver.h:37:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerfirefly_attr_write_set_brightness(struct razer_firefly_device *device, const char *buf, size_t count);
 ^
razerfirefly_driver.h:38:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerfirefly_attr_read_get_firmware_version(struct razer_firefly_device *device, char *buf);
 ^
razerfirefly_driver.h:39:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerfirefly_attr_read_device_type(struct razer_firefly_device *device, char *buf);
 ^
razerfirefly_driver.h:40:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerfirefly_attr_read_get_serial(struct razer_firefly_device *device, char *buf);
 ^
razerfirefly_driver.h:41:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerfirefly_attr_write_mode_none(struct razer_firefly_device *device, const char *buf, size_t count);
 ^
razerfirefly_driver.h:42:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerfirefly_attr_write_mode_wave(struct razer_firefly_device *device, const char *buf, size_t count);
 ^
razerfirefly_driver.h:43:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerfirefly_attr_write_mode_spectrum(struct razer_firefly_device *device, const char *buf, size_t count);
 ^
razerfirefly_driver.h:44:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerfirefly_attr_write_mode_reactive(struct razer_firefly_device *device, const char *buf, size_t count);
 ^
razerfirefly_driver.h:45:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerfirefly_attr_write_mode_breath(struct razer_firefly_device *device, const char *buf, size_t count);
 ^
razerfirefly_driver.h:46:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerfirefly_attr_write_mode_custom(struct razer_firefly_device *device, const char *buf, size_t count);
 ^
razerfirefly_driver.h:47:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerfirefly_attr_write_set_key_row(struct razer_firefly_device *device, const char *buf, size_t count);
 ^
razerfirefly_driver.h:48:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerfirefly_attr_write_device_mode(struct razer_firefly_device *device, const char *buf, size_t count);
 ^
razerfirefly_driver.h:49:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerfirefly_attr_read_device_mode(struct razer_firefly_device *device, char *buf);
 ^
In file included from ChromaAPI.cpp:34:0:
razerkraken_driver.h:9:15: error: field ‘lock’ has incomplete type ‘mutex’
  struct mutex lock;
               ^
In file included from ChromaAPI.cpp:31:0:
razerkbd_driver.h:71:9: note: forward declaration of ‘struct mutex’
  struct mutex lock;
         ^
In file included from ChromaAPI.cpp:34:0:
razerkraken_driver.h:134:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkraken_attr_write_mode_static(struct razer_kraken_device *device, const char *buf, size_t count);
 ^
razerkraken_driver.h:135:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkraken_attr_read_device_type(struct razer_kraken_device *device, char *buf);
 ^
razerkraken_driver.h:136:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkraken_attr_write_mode_spectrum(struct razer_kraken_device *device, const char *buf, size_t count);
 ^
razerkraken_driver.h:137:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkraken_attr_write_mode_none(struct razer_kraken_device *device, const char *buf, size_t count);
 ^
razerkraken_driver.h:138:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkraken_attr_read_mode_static(struct razer_kraken_device *device, char *buf);
 ^
razerkraken_driver.h:139:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkraken_attr_write_mode_breath(struct razer_kraken_device *device, const char *buf, size_t count);
 ^
razerkraken_driver.h:140:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkraken_attr_read_mode_breath(struct razer_kraken_device *device, char *buf);
 ^
razerkraken_driver.h:141:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkraken_attr_read_get_serial(struct razer_kraken_device *device, char *buf);
 ^
razerkraken_driver.h:142:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkraken_attr_read_get_firmware_version(struct razer_kraken_device *device, char *buf);
 ^
razerkraken_driver.h:143:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkraken_attr_read_matrix_current_effect(struct razer_kraken_device *device, char *buf);
 ^
In file included from ChromaAPI.cpp:35:0:
razermug_driver.h:8:15: error: field ‘lock’ has incomplete type ‘mutex’
  struct mutex lock;
               ^
In file included from ChromaAPI.cpp:31:0:
razerkbd_driver.h:71:9: note: forward declaration of ‘struct mutex’
  struct mutex lock;
         ^
In file included from ChromaAPI.cpp:35:0:
razermug_driver.h:15:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermug_attr_write_mode_static(struct razer_mug_device* device, const char *buf, size_t count);
 ^
razermug_driver.h:16:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermug_attr_read_device_type(struct razer_mug_device* device, char *buf);
 ^
razermug_driver.h:17:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermug_attr_write_mode_spectrum(struct razer_mug_device* device, const char *buf, size_t count);
 ^
razermug_driver.h:18:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermug_attr_write_mode_none(struct razer_mug_device* device, const char *buf, size_t count);
 ^
razermug_driver.h:19:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermug_attr_write_mode_blinking(struct razer_mug_device* device, const char *buf, size_t count);
 ^
razermug_driver.h:20:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermug_attr_write_mode_wave(struct razer_mug_device* device, const char *buf, size_t count);
 ^
razermug_driver.h:21:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermug_attr_write_mode_breath(struct razer_mug_device* device, const char *buf, size_t count);
 ^
razermug_driver.h:22:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermug_attr_read_get_serial(struct razer_mug_device* device, char *buf);
 ^
razermug_driver.h:23:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermug_attr_read_get_firmware_version(struct razer_mug_device* device, char *buf);
 ^
razermug_driver.h:24:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermug_attr_write_device_mode(struct razer_mug_device* device, const char *buf, size_t count);
 ^
razermug_driver.h:25:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermug_attr_read_get_cup_state(struct razer_mug_device* device, char *buf);
 ^
razermug_driver.h:26:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermug_attr_read_device_mode(struct razer_mug_device* device, char *buf);
 ^
razermug_driver.h:27:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermug_attr_write_set_brightness(struct razer_mug_device* device, const char *buf, size_t count);
 ^
razermug_driver.h:28:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermug_attr_read_set_brightness(struct razer_mug_device* device, char *buf);
 ^
ChromaAPI.cpp:63:102: error: ‘INT’ has not been declared
 struct usb_interface_descriptor* usb_find_interface(struct usb_config_descriptor* config_descriptor, INT interface_number, INT alt_interface_number, struct usb_interface_descriptor** first_interface) {
                                                                                                      ^
ChromaAPI.cpp:63:124: error: ‘INT’ has not been declared
 struct usb_interface_descriptor* usb_find_interface(struct usb_config_descriptor* config_descriptor, INT interface_number, INT alt_interface_number, struct usb_interface_descriptor** first_interface) {
                                                                                                                            ^
ChromaAPI.cpp: In function ‘usb_interface_descriptor* usb_find_interface(usb_config_descriptor*, int, int, usb_interface_descriptor**)’:
ChromaAPI.cpp:68:22: error: ‘NULL’ was not declared in this scope
   *first_interface = NULL;
                      ^
ChromaAPI.cpp:71:10: error: ‘NULL’ was not declared in this scope
   return NULL;
          ^
ChromaAPI.cpp:73:51: error: invalid use of incomplete type ‘struct usb_config_descriptor’
  for (intfIndex = 0; intfIndex < config_descriptor->bNumInterfaces; intfIndex++)
                                                   ^
ChromaAPI.cpp:63:60: note: forward declaration of ‘struct usb_config_descriptor’
 struct usb_interface_descriptor* usb_find_interface(struct usb_config_descriptor* config_descriptor, INT interface_number, INT alt_interface_number, struct usb_interface_descriptor** first_interface) {
                                                            ^
ChromaAPI.cpp:74:24: error: invalid use of incomplete type ‘struct usb_config_descriptor’
   if (config_descriptor->interface[intfIndex].num_altsetting) {
                        ^
ChromaAPI.cpp:63:60: note: forward declaration of ‘struct usb_config_descriptor’
 struct usb_interface_descriptor* usb_find_interface(struct usb_config_descriptor* config_descriptor, INT interface_number, INT alt_interface_number, struct usb_interface_descriptor** first_interface) {
                                                            ^
ChromaAPI.cpp:75:29: error: invalid use of incomplete type ‘struct usb_config_descriptor’
    intf = &config_descriptor->interface[intfIndex].altsetting[0];
                             ^
ChromaAPI.cpp:63:60: note: forward declaration of ‘struct usb_config_descriptor’
 struct usb_interface_descriptor* usb_find_interface(struct usb_config_descriptor* config_descriptor, INT interface_number, INT alt_interface_number, struct usb_interface_descriptor** first_interface) {
                                                            ^
ChromaAPI.cpp:76:49: error: ‘NULL’ was not declared in this scope
    if ((first_interface) && *first_interface == NULL)
                                                 ^
ChromaAPI.cpp:78:12: error: invalid use of incomplete type ‘struct usb_interface_descriptor’
    if (intf->bInterfaceNumber == interface_number && (alt_interface_number == -1 || intf->bAlternateSetting == alt_interface_number))
            ^
ChromaAPI.cpp:63:8: note: forward declaration of ‘struct usb_interface_descriptor’
 struct usb_interface_descriptor* usb_find_interface(struct usb_config_descriptor* config_descriptor, INT interface_number, INT alt_interface_number, struct usb_interface_descriptor** first_interface) {
        ^
ChromaAPI.cpp:78:89: error: invalid use of incomplete type ‘struct usb_interface_descriptor’
    if (intf->bInterfaceNumber == interface_number && (alt_interface_number == -1 || intf->bAlternateSetting == alt_interface_number))
                                                                                         ^
ChromaAPI.cpp:63:8: note: forward declaration of ‘struct usb_interface_descriptor’
 struct usb_interface_descriptor* usb_find_interface(struct usb_config_descriptor* config_descriptor, INT interface_number, INT alt_interface_number, struct usb_interface_descriptor** first_interface) {
        ^
ChromaAPI.cpp:82:9: error: ‘NULL’ was not declared in this scope
  return NULL;
         ^
ChromaAPI.cpp: At global scope:
ChromaAPI.cpp:85:35: error: ‘WORD’ was not declared in this scope
 struct usb_dev_handle* chromaOpen(WORD vid, WORD pid, INT interfaceNumber, INT altInterfaceNumber, struct usb_device** deviceForHandle) {
                                   ^
ChromaAPI.cpp:85:45: error: ‘WORD’ was not declared in this scope
 struct usb_dev_handle* chromaOpen(WORD vid, WORD pid, INT interfaceNumber, INT altInterfaceNumber, struct usb_device** deviceForHandle) {
                                             ^
ChromaAPI.cpp:85:55: error: ‘INT’ was not declared in this scope
 struct usb_dev_handle* chromaOpen(WORD vid, WORD pid, INT interfaceNumber, INT altInterfaceNumber, struct usb_device** deviceForHandle) {
                                                       ^
ChromaAPI.cpp:85:76: error: ‘INT’ was not declared in this scope
 struct usb_dev_handle* chromaOpen(WORD vid, WORD pid, INT interfaceNumber, INT altInterfaceNumber, struct usb_device** deviceForHandle) {
                                                                            ^
ChromaAPI.cpp:85:100: error: expected primary-expression before ‘struct’
 struct usb_dev_handle* chromaOpen(WORD vid, WORD pid, INT interfaceNumber, INT altInterfaceNumber, struct usb_device** deviceForHandle) {
                                                                                                    ^
ChromaAPI.cpp:85:135: error: expression list treated as compound expression in initializer [-fpermissive]
 struct usb_dev_handle* chromaOpen(WORD vid, WORD pid, INT interfaceNumber, INT altInterfaceNumber, struct usb_device** deviceForHandle) {
                                                                                                                                       ^
ChromaAPI.cpp:85:137: error: expected ‘,’ or ‘;’ before ‘{’ token
 struct usb_dev_handle* chromaOpen(WORD vid, WORD pid, INT interfaceNumber, INT altInterfaceNumber, struct usb_device** deviceForHandle) {
                                                                                                                                         ^
make: *** [ChromaAPI.o] Error 1
razercommon.cpp: In function ‘int razer_get_usb_response(usb_dev_handle*, unsigned int, razer_report*, unsigned int, razer_report*, long unsigned int, long unsigned int)’:
razercommon.cpp:11:65: error: ‘malloc’ was not declared in this scope
  char* requestBuffer = (char*)malloc(sizeof(struct razer_report));
                                                                 ^
razercommon.cpp:12:44: error: ‘memcpy’ was not declared in this scope
  memcpy(requestBuffer, request_report, size);
                                            ^
razercommon.cpp:14:3: error: ‘USB_TYPE_CLASS’ was not declared in this scope
   USB_TYPE_CLASS | USB_RECIP_INTERFACE | USB_ENDPOINT_OUT,
   ^
razercommon.cpp:14:20: error: ‘USB_RECIP_INTERFACE’ was not declared in this scope
   USB_TYPE_CLASS | USB_RECIP_INTERFACE | USB_ENDPOINT_OUT,
                    ^
razercommon.cpp:14:42: error: ‘USB_ENDPOINT_OUT’ was not declared in this scope
   USB_TYPE_CLASS | USB_RECIP_INTERFACE | USB_ENDPOINT_OUT,
                                          ^
razercommon.cpp:18:7: error: ‘usb_control_msg’ was not declared in this scope
   5000);
       ^
razercommon.cpp:19:20: error: ‘free’ was not declared in this scope
  free(requestBuffer);
                    ^
	razercommon.cpp:20:9: error: ‘Sleep’ was not declared in this scope
	  Sleep(5);
			 ^
razercommon.cpp:24:42: error: ‘USB_ENDPOINT_IN’ was not declared in this scope
   USB_TYPE_CLASS | USB_RECIP_INTERFACE | USB_ENDPOINT_IN,
                                          ^
razercommon.cpp: In function ‘razer_report get_razer_report(unsigned char, unsigned char, unsigned char)’:
razercommon.cpp:67:55: error: ‘memset’ was not declared in this scope
     memset(&new_report, 0, sizeof(struct razer_report));
                                                       ^
razercommon.cpp: In function ‘razer_report get_empty_razer_report()’:
razercommon.cpp:86:55: error: ‘memset’ was not declared in this scope
     memset(&new_report, 0, sizeof(struct razer_report));
                                                       ^
razercommon.cpp: In function ‘void print_erroneous_report(razer_report*, char*, char*)’:
razercommon.cpp:96:41: error: ‘usb_strerror’ was not declared in this scope
  printf("USBError!\n%s\n", usb_strerror());
                                         ^
razercommon.cpp:96:42: error: ‘printf’ was not declared in this scope
  printf("USBError!\n%s\n", usb_strerror());
                                          ^
make: *** [razercommon.o] Error 1
razerchromacommon.cpp: In function ‘razer_report razer_chroma_standard_matrix_set_custom_frame(unsigned char, unsigned char, unsigned char, unsigned char*)’:
razerchromacommon.cpp:433:5: error: ‘size_t’ was not declared in this scope
     size_t row_length = (size_t) (((stop_col + 1) - start_col) * 3);
     ^
razerchromacommon.cpp:433:5: note: suggested alternatives:
In file included from /usr/include/c++/5/bits/stl_algobase.h:59:0,
                 from /usr/include/c++/5/bits/stl_tree.h:63,
                 from /usr/include/c++/5/set:60,
                 from razerchromacommon.cpp:1:
/usr/include/x86_64-linux-gnu/c++/5/bits/c++config.h:196:26: note:   ‘std::size_t’
   typedef __SIZE_TYPE__  size_t;
                          ^
/usr/include/x86_64-linux-gnu/c++/5/bits/c++config.h:196:26: note:   ‘std::size_t’
razerchromacommon.cpp:443:48: error: ‘row_length’ was not declared in this scope
     memcpy(&report.arguments[index], rgb_data, row_length);
                                                ^
razerchromacommon.cpp:443:58: error: ‘memcpy’ was not declared in this scope
     memcpy(&report.arguments[index], rgb_data, row_length);
                                                          ^
razerchromacommon.cpp: In function ‘razer_report razer_chroma_extended_matrix_set_custom_frame(unsigned char, unsigned char, unsigned char, unsigned char*)’:
razerchromacommon.cpp:703:5: error: ‘size_t’ was not declared in this scope
     size_t row_length = (size_t) (((stop_col + 1) - start_col) * 3);
     ^
razerchromacommon.cpp:703:5: note: suggested alternatives:
In file included from /usr/include/c++/5/bits/stl_algobase.h:59:0,
                 from /usr/include/c++/5/bits/stl_tree.h:63,
                 from /usr/include/c++/5/set:60,
                 from razerchromacommon.cpp:1:
/usr/include/x86_64-linux-gnu/c++/5/bits/c++config.h:196:26: note:   ‘std::size_t’
   typedef __SIZE_TYPE__  size_t;
                          ^
/usr/include/x86_64-linux-gnu/c++/5/bits/c++config.h:196:26: note:   ‘std::size_t’
razerchromacommon.cpp:713:48: error: ‘row_length’ was not declared in this scope
     memcpy(&report.arguments[index], rgb_data, row_length);
                                                ^
razerchromacommon.cpp:713:58: error: ‘memcpy’ was not declared in this scope
     memcpy(&report.arguments[index], rgb_data, row_length);
                                                          ^
razerchromacommon.cpp: In function ‘razer_report razer_chroma_misc_one_row_set_custom_frame(unsigned char, unsigned char, unsigned char*)’:
razerchromacommon.cpp:897:5: error: ‘size_t’ was not declared in this scope
     size_t row_length = (size_t) (((stop_col + 1) - start_col) * 3);
     ^
razerchromacommon.cpp:897:5: note: suggested alternatives:
In file included from /usr/include/c++/5/bits/stl_algobase.h:59:0,
                 from /usr/include/c++/5/bits/stl_tree.h:63,
                 from /usr/include/c++/5/set:60,
                 from razerchromacommon.cpp:1:
/usr/include/x86_64-linux-gnu/c++/5/bits/c++config.h:196:26: note:   ‘std::size_t’
   typedef __SIZE_TYPE__  size_t;
                          ^
/usr/include/x86_64-linux-gnu/c++/5/bits/c++config.h:196:26: note:   ‘std::size_t’
razerchromacommon.cpp:903:48: error: ‘row_length’ was not declared in this scope
     memcpy(&report.arguments[index], rgb_data, row_length);
                                                ^
razerchromacommon.cpp:903:58: error: ‘memcpy’ was not declared in this scope
     memcpy(&report.arguments[index], rgb_data, row_length);
                                                          ^
make: *** [razerchromacommon.o] Error 1
In file included from razerfirefly_driver.cpp:6:0:
razerfirefly_driver.h:30:15: error: field ‘lock’ has incomplete type ‘mutex’
  struct mutex lock;
               ^
razerfirefly_driver.h:30:9: note: forward declaration of ‘struct mutex’
  struct mutex lock;
         ^
razerfirefly_driver.h:35:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerfirefly_attr_write_mode_static(struct razer_firefly_device *device, const char *buf, size_t count);
 ^
razerfirefly_driver.h:36:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerfirefly_attr_read_set_brightness(struct razer_firefly_device *device, char *buf);
 ^
razerfirefly_driver.h:37:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerfirefly_attr_write_set_brightness(struct razer_firefly_device *device, const char *buf, size_t count);
 ^
razerfirefly_driver.h:38:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerfirefly_attr_read_get_firmware_version(struct razer_firefly_device *device, char *buf);
 ^
razerfirefly_driver.h:39:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerfirefly_attr_read_device_type(struct razer_firefly_device *device, char *buf);
 ^
razerfirefly_driver.h:40:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerfirefly_attr_read_get_serial(struct razer_firefly_device *device, char *buf);
 ^
razerfirefly_driver.h:41:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerfirefly_attr_write_mode_none(struct razer_firefly_device *device, const char *buf, size_t count);
 ^
razerfirefly_driver.h:42:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerfirefly_attr_write_mode_wave(struct razer_firefly_device *device, const char *buf, size_t count);
 ^
razerfirefly_driver.h:43:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerfirefly_attr_write_mode_spectrum(struct razer_firefly_device *device, const char *buf, size_t count);
 ^
razerfirefly_driver.h:44:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerfirefly_attr_write_mode_reactive(struct razer_firefly_device *device, const char *buf, size_t count);
 ^
razerfirefly_driver.h:45:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerfirefly_attr_write_mode_breath(struct razer_firefly_device *device, const char *buf, size_t count);
 ^
razerfirefly_driver.h:46:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerfirefly_attr_write_mode_custom(struct razer_firefly_device *device, const char *buf, size_t count);
 ^
razerfirefly_driver.h:47:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerfirefly_attr_write_set_key_row(struct razer_firefly_device *device, const char *buf, size_t count);
 ^
razerfirefly_driver.h:48:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerfirefly_attr_write_device_mode(struct razer_firefly_device *device, const char *buf, size_t count);
 ^
razerfirefly_driver.h:49:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerfirefly_attr_read_device_mode(struct razer_firefly_device *device, char *buf);
 ^
razerfirefly_driver.cpp: In function ‘razer_report razer_send_payload_firefly(razer_firefly_device*, razer_report*)’:
razerfirefly_driver.cpp:27:92: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
    print_erroneous_report(&response_report, "razerfirefly", "Response doesnt match request");
                                                                                            ^
razerfirefly_driver.cpp:27:92: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
razerfirefly_driver.cpp:31:77: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
    print_erroneous_report(&response_report, "razerfirefly", "Command failed");
                                                                             ^
razerfirefly_driver.cpp:31:77: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
razerfirefly_driver.cpp:33:84: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
    print_erroneous_report(&response_report, "razerfirefly", "Command not supported");
                                                                                    ^
razerfirefly_driver.cpp:33:84: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
razerfirefly_driver.cpp:35:80: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
    print_erroneous_report(&response_report, "razerfirefly", "Command timed out");
                                                                                ^
razerfirefly_driver.cpp:35:80: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
razerfirefly_driver.cpp:37:83: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
   print_erroneous_report(&response_report, "razerfirefly", "Invalid Report Length");
                                                                                   ^
razerfirefly_driver.cpp:37:83: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
razerfirefly_driver.cpp: At global scope:
razerfirefly_driver.cpp:43:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerfirefly_attr_read_set_brightness(struct razer_firefly_device *device, char *buf) {
 ^
razerfirefly_driver.cpp:52:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerfirefly_attr_write_set_brightness(struct razer_firefly_device *device, const char *buf, size_t count) {
 ^
razerfirefly_driver.cpp:62:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerfirefly_attr_read_get_firmware_version(struct razer_firefly_device *device, char *buf) {
 ^
razerfirefly_driver.cpp:70:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerfirefly_attr_read_device_type(struct razer_firefly_device *device, char *buf) {
 ^
razerfirefly_driver.cpp:84:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerfirefly_attr_read_get_serial(struct razer_firefly_device *device, char *buf) {
 ^
razerfirefly_driver.cpp:95:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerfirefly_attr_write_mode_none(struct razer_firefly_device *device, const char *buf, size_t count) {
 ^
razerfirefly_driver.cpp:104:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerfirefly_attr_write_mode_wave(struct razer_firefly_device *device, const char *buf, size_t count) {
 ^
razerfirefly_driver.cpp:113:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerfirefly_attr_write_mode_spectrum(struct razer_firefly_device *device, const char *buf, size_t count) {
 ^
razerfirefly_driver.cpp:121:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerfirefly_attr_write_mode_reactive(struct razer_firefly_device *device, const char *buf, size_t count) {
 ^
razerfirefly_driver.cpp:133:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerfirefly_attr_write_mode_breath(struct razer_firefly_device *device, const char *buf, size_t count) {
 ^
razerfirefly_driver.cpp:155:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerfirefly_attr_write_mode_custom(struct razer_firefly_device *device, const char *buf, size_t count) {
 ^
razerfirefly_driver.cpp:163:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerfirefly_attr_write_mode_static(struct razer_firefly_device *device, const char *buf, size_t count) {
 ^
razerfirefly_driver.cpp:177:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerfirefly_attr_write_set_key_row(struct razer_firefly_device *device, const char *buf, size_t count) {
 ^
razerfirefly_driver.cpp:222:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerfirefly_attr_write_device_mode(struct razer_firefly_device *device, const char *buf, size_t count) {
 ^
razerfirefly_driver.cpp:234:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerfirefly_attr_read_device_mode(struct razer_firefly_device *device, char *buf) {
 ^
razerfirefly_driver.cpp: In function ‘razer_firefly_device* razerfirefly_init(usb_dev_handle*)’:
razerfirefly_driver.cpp:241:40: error: ‘NULL’ was not declared in this scope
  struct razer_firefly_device *device = NULL;
                                        ^
razerfirefly_driver.cpp:242:83: error: ‘malloc’ was not declared in this scope
  device = (struct razer_firefly_device*)malloc(sizeof(struct razer_firefly_device));
                                                                                   ^
razerfirefly_driver.cpp:244:46: error: invalid use of incomplete type ‘struct razerfirefly_init(usb_dev_handle*)::usb_device’
  struct usb_device* usb_dev = usb_device(dev1);
                                              ^
razerfirefly_driver.cpp:244:9: note: forward declaration of ‘struct razerfirefly_init(usb_dev_handle*)::usb_device’
  struct usb_device* usb_dev = usb_device(dev1);
         ^
razerfirefly_driver.cpp:245:26: error: ‘mutex_init’ was not declared in this scope
  mutex_init(&device->lock);
                          ^
razerfirefly_driver.cpp:246:27: error: invalid use of incomplete type ‘struct razerfirefly_init(usb_dev_handle*)::usb_device’
  device->usb_pid = usb_dev->descriptor.idProduct;
                           ^
razerfirefly_driver.cpp:244:9: note: forward declaration of ‘struct razerfirefly_init(usb_dev_handle*)::usb_device’
  struct usb_device* usb_dev = usb_device(dev1);
         ^
make: *** [razerfirefly_driver.o] Error 1
In file included from razermug_driver.cpp:6:0:
razermug_driver.h:8:15: error: field ‘lock’ has incomplete type ‘mutex’
  struct mutex lock;
               ^
razermug_driver.h:8:9: note: forward declaration of ‘struct mutex’
  struct mutex lock;
         ^
In file included from razermug_driver.cpp:6:0:
razermug_driver.h:15:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermug_attr_write_mode_static(struct razer_mug_device* device, const char *buf, size_t count);
 ^
razermug_driver.h:16:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermug_attr_read_device_type(struct razer_mug_device* device, char *buf);
 ^
razermug_driver.h:17:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermug_attr_write_mode_spectrum(struct razer_mug_device* device, const char *buf, size_t count);
 ^
razermug_driver.h:18:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermug_attr_write_mode_none(struct razer_mug_device* device, const char *buf, size_t count);
 ^
razermug_driver.h:19:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermug_attr_write_mode_blinking(struct razer_mug_device* device, const char *buf, size_t count);
 ^
razermug_driver.h:20:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermug_attr_write_mode_wave(struct razer_mug_device* device, const char *buf, size_t count);
 ^
razermug_driver.h:21:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermug_attr_write_mode_breath(struct razer_mug_device* device, const char *buf, size_t count);
 ^
razermug_driver.h:22:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermug_attr_read_get_serial(struct razer_mug_device* device, char *buf);
 ^
razermug_driver.h:23:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermug_attr_read_get_firmware_version(struct razer_mug_device* device, char *buf);
 ^
razermug_driver.h:24:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermug_attr_write_device_mode(struct razer_mug_device* device, const char *buf, size_t count);
 ^
razermug_driver.h:25:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermug_attr_read_get_cup_state(struct razer_mug_device* device, char *buf);
 ^
razermug_driver.h:26:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermug_attr_read_device_mode(struct razer_mug_device* device, char *buf);
 ^
razermug_driver.h:27:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermug_attr_write_set_brightness(struct razer_mug_device* device, const char *buf, size_t count);
 ^
razermug_driver.h:28:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermug_attr_read_set_brightness(struct razer_mug_device* device, char *buf);
 ^
razermug_driver.cpp: In function ‘razer_report razer_send_payload_mug(razer_mug_device*, razer_report*)’:
razermug_driver.cpp:27:88: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
    print_erroneous_report(&response_report, "razermug", "Response doesnt match request");
                                                                                        ^
razermug_driver.cpp:27:88: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
razermug_driver.cpp:31:73: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
    print_erroneous_report(&response_report, "razermug", "Command failed");
                                                                         ^
razermug_driver.cpp:31:73: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
razermug_driver.cpp:33:80: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
    print_erroneous_report(&response_report, "razermug", "Command not supported");
                                                                                ^
razermug_driver.cpp:33:80: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
razermug_driver.cpp:35:76: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
    print_erroneous_report(&response_report, "razermug", "Command timed out");
                                                                            ^
razermug_driver.cpp:35:76: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
razermug_driver.cpp:37:79: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
   print_erroneous_report(&response_report, "razermug", "Invalid Report Length");
                                                                               ^
razermug_driver.cpp:37:79: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
razermug_driver.cpp: At global scope:
razermug_driver.cpp:50:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermug_attr_read_device_type(struct razer_mug_device* device, char *buf) {
 ^
razermug_driver.cpp:64:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermug_attr_write_mode_spectrum(struct razer_mug_device* device, const char *buf, size_t count) {
 ^
razermug_driver.cpp:75:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermug_attr_write_mode_none(struct razer_mug_device* device, const char *buf, size_t count) {
 ^
razermug_driver.cpp:86:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermug_attr_write_mode_blinking(struct razer_mug_device* device, const char *buf, size_t count) {
 ^
razermug_driver.cpp:105:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermug_attr_write_mode_static(struct razer_mug_device* device, const char *buf, size_t count) {
 ^
razermug_driver.cpp:120:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermug_attr_write_mode_wave(struct razer_mug_device* device, const char *buf, size_t count) {
 ^
razermug_driver.cpp:132:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermug_attr_write_mode_breath(struct razer_mug_device* device, const char *buf, size_t count) {
 ^
razermug_driver.cpp:155:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermug_attr_read_get_serial(struct razer_mug_device* device, char *buf) {
 ^
razermug_driver.cpp:161:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermug_attr_read_get_firmware_version(struct razer_mug_device* device, char *buf) {
 ^
razermug_driver.cpp:179:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermug_attr_write_device_mode(struct razer_mug_device* device, const char *buf, size_t count) {
 ^
razermug_driver.cpp:192:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermug_attr_read_get_cup_state(struct razer_mug_device* device, char *buf) {
 ^
razermug_driver.cpp:203:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermug_attr_read_device_mode(struct razer_mug_device* device, char *buf) {
 ^
razermug_driver.cpp:214:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermug_attr_write_set_brightness(struct razer_mug_device* device, const char *buf, size_t count) {
 ^
razermug_driver.cpp:230:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermug_attr_read_set_brightness(struct razer_mug_device* device, char *buf) {
 ^
razermug_driver.cpp: In function ‘razer_mug_device* razermug_init(usb_dev_handle*)’:
razermug_driver.cpp:240:36: error: ‘NULL’ was not declared in this scope
  struct razer_mug_device *device = NULL;
                                    ^
razermug_driver.cpp:241:75: error: ‘malloc’ was not declared in this scope
  device = (struct razer_mug_device*)malloc(sizeof(struct razer_mug_device));
                                                                           ^
razermug_driver.cpp:243:46: error: invalid use of incomplete type ‘struct razermug_init(usb_dev_handle*)::usb_device’
  struct usb_device* usb_dev = usb_device(dev1);
                                              ^
razermug_driver.cpp:243:9: note: forward declaration of ‘struct razermug_init(usb_dev_handle*)::usb_device’
  struct usb_device* usb_dev = usb_device(dev1);
         ^
razermug_driver.cpp:244:29: error: ‘mutex_init’ was not declared in this scope
     mutex_init(&device->lock);
                             ^
razermug_driver.cpp:245:27: error: invalid use of incomplete type ‘struct razermug_init(usb_dev_handle*)::usb_device’
  device->usb_pid = usb_dev->descriptor.idProduct;
                           ^
razermug_driver.cpp:243:9: note: forward declaration of ‘struct razermug_init(usb_dev_handle*)::usb_device’
  struct usb_device* usb_dev = usb_device(dev1);
         ^
razermug_driver.cpp:247:21: error: ‘rand’ was not declared in this scope
  rand_serial = rand();
                     ^
razermug_driver.cpp:248:59: error: ‘sprintf_s’ was not declared in this scope
  sprintf_s(&device->serial[0], 23, "MUG%012u", rand_serial);
                                                           ^
make: *** [razermug_driver.o] Error 1
In file included from razermouse_driver.cpp:6:0:
razermouse_driver.h:24:15: error: field ‘lock’ has incomplete type ‘mutex’
  struct mutex lock;
               ^
razermouse_driver.h:24:9: note: forward declaration of ‘struct mutex’
  struct mutex lock;
         ^
razermouse_driver.h:45:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_read_device_type(struct razer_mouse_device *device, char *buf);
 ^
razermouse_driver.h:46:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_read_get_firmware_version(struct razer_mouse_device *device, char *buf);
 ^
razermouse_driver.h:47:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_test(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:48:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_mode_none(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:49:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_mode_static(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:50:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_mode_wave(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:51:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_mode_spectrum(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:52:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_mode_reactive(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:53:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_mode_breath(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:54:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_read_get_serial(struct razer_mouse_device *device, char *buf);
 ^
razermouse_driver.h:55:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_read_get_battery(struct razer_mouse_device *device, char *buf);
 ^
razermouse_driver.h:56:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_read_is_charging(struct razer_mouse_device *device, char *buf);
 ^
razermouse_driver.h:57:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_set_charging_effect(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:58:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_set_charging_colour(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:59:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_read_poll_rate(struct razer_mouse_device *device, char *buf);
 ^
razermouse_driver.h:60:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_poll_rate(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:61:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_set_brightness(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:62:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_read_set_brightness(struct razer_mouse_device *device, char *buf);
 ^
razermouse_driver.h:63:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_mouse_dpi(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:64:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_read_mouse_dpi(struct razer_mouse_device *device, char *buf);
 ^
razermouse_driver.h:65:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_set_idle_time(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:66:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_set_low_battery_threshold(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:67:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_set_key_row(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:68:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_device_mode(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:69:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_read_device_mode(struct razer_mouse_device *device, char *buf);
 ^
razermouse_driver.h:70:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_read_scroll_led_brightness(struct razer_mouse_device *device, char *buf);
 ^
razermouse_driver.h:71:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_scroll_led_brightness(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:72:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_read_logo_led_brightness(struct razer_mouse_device *device, char *buf);
 ^
razermouse_driver.h:73:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_logo_led_brightness(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:74:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_scroll_led_state(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:75:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_read_scroll_led_state(struct razer_mouse_device *device, char *buf);
 ^
razermouse_driver.h:76:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_logo_led_state(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:77:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_read_logo_led_state(struct razer_mouse_device *device, char *buf);
 ^
razermouse_driver.h:78:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_scroll_led_rgb(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:79:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_read_scroll_led_rgb(struct razer_mouse_device *device, char *buf);
 ^
razermouse_driver.h:80:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_logo_led_rgb(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:81:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_read_logo_led_rgb(struct razer_mouse_device *device, char *buf);
 ^
razermouse_driver.h:82:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_scroll_led_effect(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:83:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_read_scroll_led_effect(struct razer_mouse_device *device, char *buf);
 ^
razermouse_driver.h:84:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_logo_led_effect(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:85:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_read_logo_led_effect(struct razer_mouse_device *device, char *buf);
 ^
razermouse_driver.h:86:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_scroll_mode_spectrum(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:87:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_scroll_mode_reactive(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:88:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_scroll_mode_breath(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:89:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_scroll_mode_static(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:90:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_scroll_mode_none(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:91:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_logo_mode_spectrum(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:92:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_logo_mode_reactive(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:93:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_logo_mode_breath(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:94:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_logo_mode_static(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:95:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_logo_mode_none(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:96:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_matrix_custom_frame(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.h:97:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_mode_custom(struct razer_mouse_device *device, const char *buf, size_t count);
 ^
razermouse_driver.cpp: In function ‘razer_report razer_send_payload_mouse(razer_mouse_device*, razer_report*)’:
razermouse_driver.cpp:28:90: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
    print_erroneous_report(&response_report, "razermouse", "Response doesnt match request");
                                                                                          ^
razermouse_driver.cpp:28:90: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
razermouse_driver.cpp:32:75: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
    print_erroneous_report(&response_report, "razermouse", "Command failed");
                                                                           ^
razermouse_driver.cpp:32:75: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
razermouse_driver.cpp:34:82: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
    print_erroneous_report(&response_report, "razermouse", "Command not supported");
                                                                                  ^
razermouse_driver.cpp:34:82: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
razermouse_driver.cpp:36:78: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
    print_erroneous_report(&response_report, "razermouse", "Command timed out");
                                                                              ^
razermouse_driver.cpp:36:78: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
razermouse_driver.cpp:38:85: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
       print_erroneous_report(&response_report, "razermouse", "Invalid Report Length");
                                                                                     ^
razermouse_driver.cpp:38:85: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
razermouse_driver.cpp: At global scope:
razermouse_driver.cpp:44:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_read_device_type(struct razer_mouse_device *device, char *buf) {
 ^
razermouse_driver.cpp:82:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_read_get_firmware_version(struct razer_mouse_device *device, char *buf) {
 ^
razermouse_driver.cpp:97:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_test(struct razer_mouse_device *device, const char *buf, size_t count) {
 ^
razermouse_driver.cpp:103:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_mode_none(struct razer_mouse_device *device, const char *buf, size_t count) {
 ^
razermouse_driver.cpp:120:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_mode_static(struct razer_mouse_device *device, const char *buf, size_t count) {
 ^
razermouse_driver.cpp:141:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_mode_wave(struct razer_mouse_device *device, const char *buf, size_t count) {
 ^
razermouse_driver.cpp:150:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_mode_spectrum(struct razer_mouse_device *device, const char *buf, size_t count) {
 ^
razermouse_driver.cpp:167:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_mode_reactive(struct razer_mouse_device *device, const char *buf, size_t count) {
 ^
razermouse_driver.cpp:188:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_mode_breath(struct razer_mouse_device *device, const char *buf, size_t count) {
 ^
razermouse_driver.cpp:228:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_read_get_serial(struct razer_mouse_device *device, char *buf) {
 ^
razermouse_driver.cpp:246:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_read_get_battery(struct razer_mouse_device *device, char *buf) {
 ^
razermouse_driver.cpp:254:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_read_is_charging(struct razer_mouse_device *device, char *buf) {
 ^
razermouse_driver.cpp:262:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_set_charging_effect(struct razer_mouse_device *device, const char *buf, size_t count) {
 ^
razermouse_driver.cpp:274:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_set_charging_colour(struct razer_mouse_device *device, const char *buf, size_t count) {
 ^
razermouse_driver.cpp:288:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_read_poll_rate(struct razer_mouse_device *device, char *buf) {
 ^
razermouse_driver.cpp:316:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_poll_rate(struct razer_mouse_device *device, const char *buf, size_t count) {
 ^
razermouse_driver.cpp:331:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_set_brightness(struct razer_mouse_device *device, const char *buf, size_t count) {
 ^
razermouse_driver.cpp:356:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_read_set_brightness(struct razer_mouse_device *device, char *buf) {
 ^
razermouse_driver.cpp:385:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_mouse_dpi(struct razer_mouse_device *device, const char *buf, size_t count) {
 ^
razermouse_driver.cpp:425:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_read_mouse_dpi(struct razer_mouse_device *device, char *buf) {
 ^
razermouse_driver.cpp:452:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_set_idle_time(struct razer_mouse_device *device, const char *buf, size_t count) {
 ^
razermouse_driver.cpp:461:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_set_low_battery_threshold(struct razer_mouse_device *device, const char *buf, size_t count) {
 ^
razermouse_driver.cpp:470:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_set_key_row(struct razer_mouse_device *device, const char *buf, size_t count) {
 ^
razermouse_driver.cpp:513:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_device_mode(struct razer_mouse_device *device, const char *buf, size_t count) {
 ^
razermouse_driver.cpp:531:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_read_device_mode(struct razer_mouse_device *device, char *buf) {
 ^
razermouse_driver.cpp:545:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_read_scroll_led_brightness(struct razer_mouse_device *device, char *buf) {
 ^
razermouse_driver.cpp:566:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_scroll_led_brightness(struct razer_mouse_device *device, const char *buf, size_t count) {
 ^
razermouse_driver.cpp:589:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_read_logo_led_brightness(struct razer_mouse_device *device, char *buf) {
 ^
razermouse_driver.cpp:610:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_logo_led_brightness(struct razer_mouse_device *device, const char *buf, size_t count) {
 ^
razermouse_driver.cpp:631:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_scroll_led_state(struct razer_mouse_device *device, const char *buf, size_t count) {
 ^
razermouse_driver.cpp:640:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_read_scroll_led_state(struct razer_mouse_device *device, char *buf) {
 ^
razermouse_driver.cpp:649:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_logo_led_state(struct razer_mouse_device *device, const char *buf, size_t count) {
 ^
razermouse_driver.cpp:658:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_read_logo_led_state(struct razer_mouse_device *device, char *buf) {
 ^
razermouse_driver.cpp:667:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_scroll_led_rgb(struct razer_mouse_device *device, const char *buf, size_t count) {
 ^
razermouse_driver.cpp:679:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_read_scroll_led_rgb(struct razer_mouse_device *device, char *buf) {
 ^
razermouse_driver.cpp:688:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_logo_led_rgb(struct razer_mouse_device *device, const char *buf, size_t count) {
 ^
razermouse_driver.cpp:700:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_read_logo_led_rgb(struct razer_mouse_device *device, char *buf) {
 ^
razermouse_driver.cpp:709:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_scroll_led_effect(struct razer_mouse_device *device, const char *buf, size_t count) {
 ^
razermouse_driver.cpp:718:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_read_scroll_led_effect(struct razer_mouse_device *device, char *buf) {
 ^
razermouse_driver.cpp:727:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_logo_led_effect(struct razer_mouse_device *device, const char *buf, size_t count) {
 ^
razermouse_driver.cpp:736:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_read_logo_led_effect(struct razer_mouse_device *device, char *buf) {
 ^
razermouse_driver.cpp:746:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_scroll_mode_spectrum(struct razer_mouse_device *device, const char *buf, size_t count) {
 ^
razermouse_driver.cpp:763:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_scroll_mode_reactive(struct razer_mouse_device *device, const char *buf, size_t count) {
 ^
razermouse_driver.cpp:784:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_scroll_mode_breath(struct razer_mouse_device *device, const char *buf, size_t count) {
 ^
razermouse_driver.cpp:822:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_scroll_mode_static(struct razer_mouse_device *device, const char *buf, size_t count) {
 ^
razermouse_driver.cpp:842:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_scroll_mode_none(struct razer_mouse_device *device, const char *buf, size_t count) {
 ^
razermouse_driver.cpp:859:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_logo_mode_spectrum(struct razer_mouse_device *device, const char *buf, size_t count) {
 ^
razermouse_driver.cpp:876:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_logo_mode_reactive(struct razer_mouse_device *device, const char *buf, size_t count) {
 ^
razermouse_driver.cpp:897:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_logo_mode_breath(struct razer_mouse_device *device, const char *buf, size_t count) {
 ^
razermouse_driver.cpp:935:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_logo_mode_static(struct razer_mouse_device *device, const char *buf, size_t count) {
 ^
razermouse_driver.cpp:955:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_logo_mode_none(struct razer_mouse_device *device, const char *buf, size_t count) {
 ^
razermouse_driver.cpp:972:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_matrix_custom_frame(struct razer_mouse_device *device, const char *buf, size_t count) {
 ^
razermouse_driver.cpp:1022:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razermouse_attr_write_mode_custom(struct razer_mouse_device *device, const char *buf, size_t count) {
 ^
razermouse_driver.cpp: In function ‘razer_mouse_device* razermouse_init(usb_dev_handle*)’:
razermouse_driver.cpp:1043:38: error: ‘NULL’ was not declared in this scope
  struct razer_mouse_device *device = NULL;
                                      ^
razermouse_driver.cpp:1044:79: error: ‘malloc’ was not declared in this scope
  device = (struct razer_mouse_device*)malloc(sizeof(struct razer_mouse_device));
                                                                               ^
razermouse_driver.cpp:1046:46: error: invalid use of incomplete type ‘struct razermouse_init(usb_dev_handle*)::usb_device’
  struct usb_device* usb_dev = usb_device(dev1);
                                              ^
razermouse_driver.cpp:1046:9: note: forward declaration of ‘struct razermouse_init(usb_dev_handle*)::usb_device’
  struct usb_device* usb_dev = usb_device(dev1);
         ^
razermouse_driver.cpp:1047:26: error: ‘mutex_init’ was not declared in this scope
  mutex_init(&device->lock);
                          ^
razermouse_driver.cpp:1048:27: error: invalid use of incomplete type ‘struct razermouse_init(usb_dev_handle*)::usb_device’
  device->usb_pid = usb_dev->descriptor.idProduct;
                           ^
razermouse_driver.cpp:1046:9: note: forward declaration of ‘struct razermouse_init(usb_dev_handle*)::usb_device’
  struct usb_device* usb_dev = usb_device(dev1);
         ^
make: *** [razermouse_driver.o] Error 1
In file included from razerkbd_driver.cpp:6:0:
razerkbd_driver.h:71:15: error: field ‘lock’ has incomplete type ‘mutex’
  struct mutex lock;
               ^
razerkbd_driver.h:71:9: note: forward declaration of ‘struct mutex’
  struct mutex lock;
         ^
razerkbd_driver.h:78:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_write_mode_game(struct razer_kbd_device* device, const char *buf, size_t count);
 ^
razerkbd_driver.h:79:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_read_mode_game(struct razer_kbd_device* device, char *buf);
 ^
razerkbd_driver.h:80:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_write_mode_macro(struct razer_kbd_device* device, const char *buf, size_t count);
 ^
razerkbd_driver.h:81:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_read_mode_macro(struct razer_kbd_device* device, char *buf);
 ^
razerkbd_driver.h:82:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_read_device_type(struct razer_kbd_device* device, char *buf);
 ^
razerkbd_driver.h:83:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_write_mode_macro_effect(struct razer_kbd_device* device, const char *buf, size_t count);
 ^
razerkbd_driver.h:84:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_read_mode_macro_effect(struct razer_kbd_device* device, char *buf);
 ^
razerkbd_driver.h:85:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_write_mode_pulsate(struct razer_kbd_device* device, const char *buf, size_t count);
 ^
razerkbd_driver.h:86:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_read_mode_pulsate(struct razer_kbd_device* device, char *buf);
 ^
razerkbd_driver.h:87:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_read_tartarus_profile_led_red(struct razer_kbd_device* device, char *buf);
 ^
razerkbd_driver.h:88:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_read_tartarus_profile_led_green(struct razer_kbd_device* device, char *buf);
 ^
razerkbd_driver.h:89:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_read_tartarus_profile_led_blue(struct razer_kbd_device* device, char *buf);
 ^
razerkbd_driver.h:90:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_write_tartarus_profile_led_red(struct razer_kbd_device* device, const char *buf, size_t count);
 ^
razerkbd_driver.h:91:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_write_tartarus_profile_led_green(struct razer_kbd_device* device, const char *buf, size_t count);
 ^
razerkbd_driver.h:92:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_write_tartarus_profile_led_blue(struct razer_kbd_device* device, const char *buf, size_t count);
 ^
razerkbd_driver.h:93:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_read_get_serial(struct razer_kbd_device* device, char *buf);
 ^
razerkbd_driver.h:94:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_read_get_firmware_version(struct razer_kbd_device* device, char *buf);
 ^
razerkbd_driver.h:96:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_write_mode_none(struct razer_kbd_device* device, const char *buf, size_t count);
 ^
razerkbd_driver.h:97:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_write_mode_wave(struct razer_kbd_device* device, const char *buf, size_t count);
 ^
razerkbd_driver.h:98:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_write_mode_spectrum(struct razer_kbd_device* device, const char *buf, size_t count);
 ^
razerkbd_driver.h:99:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_write_mode_reactive(struct razer_kbd_device* device, const char *buf, size_t count);
 ^
razerkbd_driver.h:100:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_write_mode_static(struct razer_kbd_device* device, const char *buf, size_t count);
 ^
razerkbd_driver.h:101:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_write_mode_starlight(struct razer_kbd_device* device, const char *buf, size_t count);
 ^
razerkbd_driver.h:102:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_write_mode_breath(struct razer_kbd_device* device, const char *buf, size_t count);
 ^
razerkbd_driver.h:103:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_write_set_logo(struct razer_kbd_device* device, const char *buf, size_t count);
 ^
razerkbd_driver.h:104:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_write_mode_custom(struct razer_kbd_device* device, const char *buf, size_t count);
 ^
razerkbd_driver.h:105:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_write_set_fn_toggle(struct razer_kbd_device* device, const char *buf, size_t count);
 ^
razerkbd_driver.h:106:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_write_set_brightness(struct razer_kbd_device* device, const char *buf, size_t count);
 ^
razerkbd_driver.h:107:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_read_set_brightness(struct razer_kbd_device* device, char *buf);
 ^
razerkbd_driver.h:109:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_write_device_mode(struct razer_kbd_device* device, const char *buf, size_t count);
 ^
razerkbd_driver.h:110:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_read_device_mode(struct razer_kbd_device* device, char *buf);
 ^
razerkbd_driver.h:111:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_write_matrix_custom_frame(struct razer_kbd_device* device, const char *buf, size_t count);
 ^
razerkbd_driver.cpp: In function ‘razer_report razer_send_payload_kbd(razer_kbd_device*, razer_report*)’:
razerkbd_driver.cpp:39:88: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
    print_erroneous_report(&response_report, "razerkbd", "Response doesnt match request");
                                                                                        ^
razerkbd_driver.cpp:39:88: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
razerkbd_driver.cpp:43:73: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
    print_erroneous_report(&response_report, "razerkbd", "Command failed");
                                                                         ^
razerkbd_driver.cpp:43:73: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
razerkbd_driver.cpp:45:80: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
    print_erroneous_report(&response_report, "razerkbd", "Command not supported");
                                                                                ^
razerkbd_driver.cpp:45:80: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
razerkbd_driver.cpp:47:76: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
    print_erroneous_report(&response_report, "razerkbd", "Command timed out");
                                                                            ^
razerkbd_driver.cpp:47:76: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
razerkbd_driver.cpp:49:79: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
   print_erroneous_report(&response_report, "razerkbd", "Invalid Report Length");
                                                                               ^
razerkbd_driver.cpp:49:79: warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]
razerkbd_driver.cpp: At global scope:
razerkbd_driver.cpp:69:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_write_mode_game(struct razer_kbd_device* device, const char *buf, size_t count) {
 ^
razerkbd_driver.cpp:78:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_read_mode_game(struct razer_kbd_device* device, char *buf) {
 ^
razerkbd_driver.cpp:87:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_write_mode_macro(struct razer_kbd_device* device, const char *buf, size_t count) {
 ^
razerkbd_driver.cpp:96:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_read_mode_macro(struct razer_kbd_device* device, char *buf) {
 ^
razerkbd_driver.cpp:105:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_read_device_type(struct razer_kbd_device* device, char *buf) {
 ^
razerkbd_driver.cpp:161:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_write_mode_macro_effect(struct razer_kbd_device* device, const char *buf, size_t count) {
 ^
razerkbd_driver.cpp:184:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_read_mode_macro_effect(struct razer_kbd_device* device, char *buf) {
 ^
razerkbd_driver.cpp:192:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_write_mode_pulsate(struct razer_kbd_device* device, const char *buf, size_t count) {
 ^
razerkbd_driver.cpp:200:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_read_mode_pulsate(struct razer_kbd_device* device, char *buf) {
 ^
razerkbd_driver.cpp:208:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_read_tartarus_profile_led_red(struct razer_kbd_device* device, char *buf) {
 ^
razerkbd_driver.cpp:216:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_read_tartarus_profile_led_green(struct razer_kbd_device* device, char *buf) {
 ^
razerkbd_driver.cpp:224:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_read_tartarus_profile_led_blue(struct razer_kbd_device* device, char *buf) {
 ^
razerkbd_driver.cpp:231:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_write_tartarus_profile_led_red(struct razer_kbd_device* device, const char *buf, size_t count) {
 ^
razerkbd_driver.cpp:239:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_write_tartarus_profile_led_green(struct razer_kbd_device* device, const char *buf, size_t count) {
 ^
razerkbd_driver.cpp:247:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_write_tartarus_profile_led_blue(struct razer_kbd_device* device, const char *buf, size_t count) {
 ^
razerkbd_driver.cpp:256:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_read_get_serial(struct razer_kbd_device* device, char *buf) {
 ^
razerkbd_driver.cpp:272:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_read_get_firmware_version(struct razer_kbd_device* device, char *buf) {
 ^
razerkbd_driver.cpp:280:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_write_mode_none(struct razer_kbd_device* device, const char *buf, size_t count) {
 ^
razerkbd_driver.cpp:301:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_write_mode_wave(struct razer_kbd_device* device, const char *buf, size_t count) {
 ^
razerkbd_driver.cpp:318:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_write_mode_spectrum(struct razer_kbd_device* device, const char *buf, size_t count) {
 ^
razerkbd_driver.cpp:339:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_write_mode_reactive(struct razer_kbd_device* device, const char *buf, size_t count) {
 ^
razerkbd_driver.cpp:359:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_write_mode_static(struct razer_kbd_device* device, const char *buf, size_t count) {
 ^
razerkbd_driver.cpp:415:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_write_mode_starlight(struct razer_kbd_device* device, const char *buf, size_t count) {
 ^
razerkbd_driver.cpp:441:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_write_mode_breath(struct razer_kbd_device* device, const char *buf, size_t count) {
 ^
razerkbd_driver.cpp:486:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_write_set_logo(struct razer_kbd_device* device, const char *buf, size_t count) {
 ^
razerkbd_driver.cpp:495:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_write_mode_custom(struct razer_kbd_device* device, const char *buf, size_t count) {
 ^
razerkbd_driver.cpp:511:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_write_set_fn_toggle(struct razer_kbd_device* device, const char *buf, size_t count) {
 ^
razerkbd_driver.cpp:520:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_write_set_brightness(struct razer_kbd_device* device, const char *buf, size_t count) {
 ^
razerkbd_driver.cpp:545:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_read_set_brightness(struct razer_kbd_device* device, char *buf) {
 ^
razerkbd_driver.cpp:575:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_write_device_mode(struct razer_kbd_device* device, const char *buf, size_t count) {
 ^
razerkbd_driver.cpp:588:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_read_device_mode(struct razer_kbd_device* device, char *buf) {
 ^
razerkbd_driver.cpp:596:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkbd_attr_write_matrix_custom_frame(struct razer_kbd_device* device, const char *buf, size_t count) {
 ^
razerkbd_driver.cpp: In function ‘razer_kbd_device* razerkbd_init(usb_dev_handle*)’:
razerkbd_driver.cpp:645:36: error: ‘NULL’ was not declared in this scope
  struct razer_kbd_device *device = NULL;
                                    ^
razerkbd_driver.cpp:646:75: error: ‘malloc’ was not declared in this scope
  device = (struct razer_kbd_device*)malloc(sizeof(struct razer_kbd_device));
                                                                           ^
razerkbd_driver.cpp:648:46: error: invalid use of incomplete type ‘struct razerkbd_init(usb_dev_handle*)::usb_device’
  struct usb_device* usb_dev = usb_device(dev1);
                                              ^
razerkbd_driver.cpp:648:9: note: forward declaration of ‘struct razerkbd_init(usb_dev_handle*)::usb_device’
  struct usb_device* usb_dev = usb_device(dev1);
         ^
razerkbd_driver.cpp:649:26: error: ‘mutex_init’ was not declared in this scope
  mutex_init(&device->lock);
                          ^
razerkbd_driver.cpp:650:27: error: invalid use of incomplete type ‘struct razerkbd_init(usb_dev_handle*)::usb_device’
  device->usb_pid = usb_dev->descriptor.idProduct;
                           ^
razerkbd_driver.cpp:648:9: note: forward declaration of ‘struct razerkbd_init(usb_dev_handle*)::usb_device’
  struct usb_device* usb_dev = usb_device(dev1);
         ^
make: *** [razerkbd_driver.o] Error 1
In file included from razerkraken_driver.cpp:6:0:
razerkraken_driver.h:9:15: error: field ‘lock’ has incomplete type ‘mutex’
  struct mutex lock;
               ^
razerkraken_driver.h:9:9: note: forward declaration of ‘struct mutex’
  struct mutex lock;
         ^
In file included from razerkraken_driver.cpp:6:0:
razerkraken_driver.h:134:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkraken_attr_write_mode_static(struct razer_kraken_device *device, const char *buf, size_t count);
 ^
razerkraken_driver.h:135:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkraken_attr_read_device_type(struct razer_kraken_device *device, char *buf);
 ^
razerkraken_driver.h:136:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkraken_attr_write_mode_spectrum(struct razer_kraken_device *device, const char *buf, size_t count);
 ^
razerkraken_driver.h:137:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkraken_attr_write_mode_none(struct razer_kraken_device *device, const char *buf, size_t count);
 ^
razerkraken_driver.h:138:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkraken_attr_read_mode_static(struct razer_kraken_device *device, char *buf);
 ^
razerkraken_driver.h:139:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkraken_attr_write_mode_breath(struct razer_kraken_device *device, const char *buf, size_t count);
 ^
razerkraken_driver.h:140:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkraken_attr_read_mode_breath(struct razer_kraken_device *device, char *buf);
 ^
razerkraken_driver.h:141:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkraken_attr_read_get_serial(struct razer_kraken_device *device, char *buf);
 ^
razerkraken_driver.h:142:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkraken_attr_read_get_firmware_version(struct razer_kraken_device *device, char *buf);
 ^
razerkraken_driver.h:143:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkraken_attr_read_matrix_current_effect(struct razer_kraken_device *device, char *buf);
 ^
razerkraken_driver.cpp: In function ‘void print_erroneous_kraken_request_report(razer_kraken_request_report*, char*, char*)’:
razerkraken_driver.cpp:22:99: error: ‘printf’ was not declared in this scope
         report->arguments[12], report->arguments[13], report->arguments[14], report->arguments[15]);
                                                                                                   ^
razerkraken_driver.cpp: In function ‘int razer_kraken_send_control_msg(razer_kraken_device*, razer_kraken_request_report*, unsigned char)’:
razerkraken_driver.cpp:29:36: error: ‘malloc’ was not declared in this scope
  requestBuffer = (char*)malloc(size);
                                    ^
razerkraken_driver.cpp:30:36: error: ‘memcpy’ was not declared in this scope
  memcpy(requestBuffer, report, size);
                                    ^
razerkraken_driver.cpp:33:3: error: ‘USB_TYPE_CLASS’ was not declared in this scope
   USB_TYPE_CLASS | USB_RECIP_INTERFACE | USB_ENDPOINT_OUT,
   ^
razerkraken_driver.cpp:33:20: error: ‘USB_RECIP_INTERFACE’ was not declared in this scope
   USB_TYPE_CLASS | USB_RECIP_INTERFACE | USB_ENDPOINT_OUT,
                    ^
razerkraken_driver.cpp:33:42: error: ‘USB_ENDPOINT_OUT’ was not declared in this scope
   USB_TYPE_CLASS | USB_RECIP_INTERFACE | USB_ENDPOINT_OUT,
                                          ^
razerkraken_driver.cpp:37:7: error: ‘usb_control_msg’ was not declared in this scope
   5000);
       ^
	razerkraken_driver.cpp:40:28: error: ‘Sleep’ was not declared in this scope
	   Sleep(report->length * 15);
								^
razerkraken_driver.cpp:41:20: error: ‘free’ was not declared in this scope
  free(requestBuffer);
                    ^
razerkraken_driver.cpp:43:60: error: ‘printf’ was not declared in this scope
         printf("razer driver: Device data transfer failed.");
                                                            ^
razerkraken_driver.cpp:44:49: error: ‘EIO’ was not declared in this scope
     return ((len < 0) ? len : ((len != size) ? -EIO : 0));
                                                 ^
razerkraken_driver.cpp: In function ‘razer_kraken_request_report get_kraken_request_report(unsigned char, unsigned char, unsigned char, short unsigned int)’:
razerkraken_driver.cpp:54:63: error: ‘memset’ was not declared in this scope
  memset(&report, 0, sizeof(struct razer_kraken_request_report));
                                                               ^
razerkraken_driver.cpp: In function ‘razer_kraken_effect_byte get_kraken_effect_byte()’:
razerkraken_driver.cpp:68:64: error: ‘memset’ was not declared in this scope
  memset(&effect_byte, 0, sizeof(union razer_kraken_effect_byte));
                                                                ^
razerkraken_driver.cpp: In function ‘unsigned char get_current_effect(razer_kraken_device*)’:
razerkraken_driver.cpp:75:53: error: ‘mutex_is_locked’ was not declared in this scope
  int is_mutex_locked = mutex_is_locked(&device->lock);
                                                     ^
razerkraken_driver.cpp:78:51: error: ‘mutex_lock’ was not declared in this scope
  if(is_mutex_locked == 0) mutex_lock(&device->lock);
                                                   ^
	razerkraken_driver.cpp:82:10: error: ‘Sleep’ was not declared in this scope
	  Sleep(20); // Sleep 20ms
			  ^
razerkraken_driver.cpp:88:55: error: ‘printf’ was not declared in this scope
   printf("razerkraken: Did not manage to get report\n");
                                                       ^
razerkraken_driver.cpp:90:53: error: ‘mutex_unlock’ was not declared in this scope
  if(is_mutex_locked == 0) mutex_unlock(&device->lock);
                                                     ^
razerkraken_driver.cpp: In function ‘razer_kraken_effect_byte get_current_effect1(razer_kraken_device*)’:
razerkraken_driver.cpp:98:77: error: ‘memset’ was not declared in this scope
  memset(&effect_byte, current_effect, sizeof(union razer_kraken_effect_byte));
                                                                             ^
razerkraken_driver.cpp: In function ‘unsigned int get_rgb_from_addr(razer_kraken_device*, short unsigned int, unsigned char, char*)’:
razerkraken_driver.cpp:104:53: error: ‘mutex_is_locked’ was not declared in this scope
  int is_mutex_locked = mutex_is_locked(&device->lock);
                                                     ^
razerkraken_driver.cpp:108:51: error: ‘mutex_lock’ was not declared in this scope
  if(is_mutex_locked == 0) mutex_lock(&device->lock);
                                                   ^
	razerkraken_driver.cpp:112:10: error: ‘Sleep’ was not declared in this scope
	  Sleep(20); // Sleep 20ms
          ^
razerkraken_driver.cpp:117:40: error: ‘memcpy’ was not declared in this scope
   memcpy(&buf[0], &device->data[1], len);
                                        ^
razerkraken_driver.cpp:120:55: error: ‘printf’ was not declared in this scope
   printf("razerkraken: Did not manage to get report\n");
                                                       ^
razerkraken_driver.cpp:123:53: error: ‘mutex_unlock’ was not declared in this scope
  if(is_mutex_locked == 0) mutex_unlock(&device->lock);
                                                     ^
razerkraken_driver.cpp: At global scope:
razerkraken_driver.cpp:130:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkraken_attr_read_device_type(struct razer_kraken_device *device, char *buf) {
 ^
razerkraken_driver.cpp:147:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkraken_attr_write_mode_spectrum(struct razer_kraken_device *device, const char *buf, size_t count) {
 ^
razerkraken_driver.cpp:167:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkraken_attr_write_mode_none(struct razer_kraken_device *device, const char *buf, size_t count) {
 ^
razerkraken_driver.cpp:188:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkraken_attr_write_mode_static(struct razer_kraken_device *device, const char *buf, size_t count) {
 ^
razerkraken_driver.cpp:219:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkraken_attr_read_mode_static(struct razer_kraken_device *device, char *buf) {
 ^
razerkraken_driver.cpp:225:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkraken_attr_write_mode_breath(struct razer_kraken_device *device, const char *buf, size_t count) {
 ^
razerkraken_driver.cpp:315:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkraken_attr_read_mode_breath(struct razer_kraken_device *device, char *buf) {
 ^
razerkraken_driver.cpp:349:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkraken_attr_read_get_serial(struct razer_kraken_device *device, char *buf) {
 ^
razerkraken_driver.cpp:380:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkraken_attr_read_get_firmware_version(struct razer_kraken_device *device, char *buf) {
 ^
razerkraken_driver.cpp:411:1: error: ‘SSIZE_T’ does not name a type
 SSIZE_T razerkraken_attr_read_matrix_current_effect(struct razer_kraken_device *device, char *buf) {
 ^
razerkraken_driver.cpp: In function ‘razer_kraken_device* razerkraken_init(usb_dev_handle*)’:
razerkraken_driver.cpp:417:39: error: ‘NULL’ was not declared in this scope
  struct razer_kraken_device *device = NULL;
                                       ^
razerkraken_driver.cpp:418:81: error: ‘malloc’ was not declared in this scope
  device = (struct razer_kraken_device*)malloc(sizeof(struct razer_kraken_device));
                                                                                 ^
razerkraken_driver.cpp:420:46: error: invalid use of incomplete type ‘struct razerkraken_init(usb_dev_handle*)::usb_device’
  struct usb_device* usb_dev = usb_device(dev1);
                                              ^
razerkraken_driver.cpp:420:9: note: forward declaration of ‘struct razerkraken_init(usb_dev_handle*)::usb_device’
  struct usb_device* usb_dev = usb_device(dev1);
         ^
razerkraken_driver.cpp:421:29: error: ‘mutex_init’ was not declared in this scope
     mutex_init(&device->lock);
                             ^
razerkraken_driver.cpp:422:27: error: invalid use of incomplete type ‘struct razerkraken_init(usb_dev_handle*)::usb_device’
  device->usb_pid = usb_dev->descriptor.idProduct;
                           ^
razerkraken_driver.cpp:420:9: note: forward declaration of ‘struct razerkraken_init(usb_dev_handle*)::usb_device’
  struct usb_device* usb_dev = usb_device(dev1);
         ^
razerkraken_driver.cpp:423:19: error: invalid use of incomplete type ‘struct razerkraken_init(usb_dev_handle*)::usb_device’
     switch(usb_dev->descriptor.idProduct) {
                   ^
razerkraken_driver.cpp:420:9: note: forward declaration of ‘struct razerkraken_init(usb_dev_handle*)::usb_device’
  struct usb_device* usb_dev = usb_device(dev1);
         ^
razerkraken_driver.cpp:436:23: error: ‘rand’ was not declared in this scope
    rand_serial = rand();
                       ^
razerkraken_driver.cpp:437:60: error: ‘sprintf_s’ was not declared in this scope
    sprintf_s(&device->serial[0], 23, "HN%015u", rand_serial);
                                                            ^
make: *** [razerkraken_driver.o] Error 1
